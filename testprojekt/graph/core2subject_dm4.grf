<?xml version="1.0" encoding="UTF-8"?>
<Graph author="Dan" created="Mon May 08 13:15:15 CEST 2017" guiVersion="4.6.0.M1" id="1494242222590" licenseCode="CLP1DDHBWM32801253EX" name="core2subject" showComponentDetails="true">
<Global>
<Metadata id="Metadata13">
<Record fieldDelimiter=";" name="agg_kunde_kfz_infos" previewAttachmentCharset="UTF-8" recordDelimiter="\n" type="delimited">
<Field name="PLZ" size="11" trim="true" type="integer"/>
<Field format="yyyy-MM-dd" name="Vbeginn" size="10" trim="true" type="integer"/>
<Field name="aggregated" type="integer"/>
</Record>
</Metadata>
<Metadata id="Metadata17">
<Record fieldDelimiter=";" name="CopyOf_dm4_fakt_kfzabsjahreg" recordDelimiter="\n" type="delimited">
<Field name="Reg_Id" size="11" trim="true" type="integer"/>
<Field name="Time_Id" size="11" trim="true" type="integer"/>
<Field name="KfzAbsJahReg" size="11" trim="true" type="integer"/>
<Field format="yyyy-MM-dd" name="Vbeginn" size="10" trim="true" type="integer"/>
<Field name="aggregated" trim="true" type="integer"/>
</Record>
</Metadata>
<Metadata id="Metadata12">
<Record fieldDelimiter=";" name="CopyOf_kunde_kfz_infos" recordDelimiter="\n" type="delimited">
<Field name="KuNr" size="30" type="string"/>
<Field name="PLZ" size="11" trim="true" type="integer"/>
<Field format="yyyy-MM-dd" name="Vbeginn" size="10" trim="true" type="integer"/>
</Record>
</Metadata>
<Metadata id="Metadata14">
<Record fieldDelimiter=";" name="dm4_dim_reg" recordDelimiter="\n" type="delimited">
<Field name="Reg_Id" size="11" type="integer"/>
<Field name="PLZ" size="11" type="integer"/>
</Record>
</Metadata>
<Metadata id="Metadata15">
<Record fieldDelimiter=";" name="dm4_dim_time" recordDelimiter="\n" type="delimited">
<Field name="Time_Id" size="11" type="integer"/>
<Field name="Jahr" size="11" type="integer"/>
</Record>
</Metadata>
<Metadata id="Metadata16">
<Record fieldDelimiter=";" name="dm4_fakt_kfzabsjahreg" recordDelimiter="\n" type="delimited">
<Field name="Reg_Id" size="11" type="integer"/>
<Field name="Time_Id" size="11" type="integer"/>
<Field name="KfzAbsJahReg" size="11" type="integer"/>
</Record>
</Metadata>
<Metadata id="Metadata11">
<Record fieldDelimiter=";" name="kunde_kfz_infos" recordDelimiter="\n" type="delimited">
<Field name="KuNr" size="30" type="string"/>
<Field name="PLZ" size="11" type="integer"/>
<Field format="yyyy-MM-dd" name="Vbeginn" size="10" type="date"/>
</Record>
</Metadata>
<Metadata id="Metadata3">
<Record fieldDelimiter=";" name="load_dts" recordDelimiter="\r\n" type="delimited">
<Field delimiter="\n" name="Load_DTS" type="date"/>
</Record>
</Metadata>
<Connection database="MYSQL" dbURL="jdbc:mysql://localhost:3306/dwh_core?user=root" id="JDBC0" jdbcSpecific="MYSQL" name="dwh_core" password="toor" type="JDBC" user="root"/>
<Connection database="MYSQL" dbURL="jdbc:mysql://localhost:3306/dwh_subject?user=root" id="JDBC1" jdbcSpecific="MYSQL" name="dwh_subject" password="toor" type="JDBC" user="root"/>
<GraphParameters>
<GraphParameterFile fileURL="workspace.prm"/>
</GraphParameters>
<LookupTable dbConnection="JDBC1" id="LookupTable0" maxCached="0" metadata="Metadata14" name="dbLookup0" storeNulls="true" type="dbLookup">
<attr name="sqlQuery"><![CDATA[SELECT * FROM dwh_subject.dm4_dim_reg order by PLZ asc;]]></attr>
</LookupTable>
<LookupTable dbConnection="JDBC1" id="LookupTable1" maxCached="0" metadata="Metadata15" name="dbLookup1" storeNulls="true" type="dbLookup">
<attr name="sqlQuery"><![CDATA[SELECT * FROM dwh_subject.dm4_dim_time order by Jahr asc;]]></attr>
</LookupTable>
<Dictionary>
<Entry input="true" name="load_dts" output="true" type="date"/>
</Dictionary>
</Global>
<Phase number="0">
<Node dbConnection="JDBC0" guiName="DBInputTable" guiX="-9" guiY="-2" id="DBINPUT_TABLE" type="DB_INPUT_TABLE">
<attr name="sqlQuery"><![CDATA[select `dwh_core`.`h_kunde`.`Load_DTS`
from `dwh_core`.`h_kunde`]]></attr>
</Node>
<Node guiName="Reformat" guiX="195" guiY="-2" id="REFORMAT1" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	dictionary.load_dts = $in.0.Load_DTS;

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node guiName="Trash" guiX="407" guiY="-2" id="TRASH" type="TRASH"/>
<Edge fromNode="DBINPUT_TABLE:0" guiBendpoints="" guiRouter="Manhattan" id="Edge15" inPort="Port 0 (in)" metadata="Metadata3" outPort="Port 0 (out)" toNode="REFORMAT1:0"/>
<Edge fromNode="REFORMAT1:0" guiBendpoints="" guiRouter="Manhattan" id="Edge29" inPort="Port 0 (in)" outPort="Port 0 (out)" toNode="TRASH:0"/>
</Phase>
<Phase number="1">
<Node aggregateKey="Vbeginn" guiName="Aggregate" guiX="654" guiY="296" id="AGGREGATE" mapping="$Vbeginn:=$Vbeginn;$aggregated:=countnonnull($KuNr);" sorted="false" type="AGGREGATE"/>
<Node aggregateKey="PLZ" guiName="Aggregate" guiX="654" guiY="442" id="AGGREGATE1" mapping="$PLZ:=$PLZ;$aggregated:=countnonnull($KuNr);" sorted="false" type="AGGREGATE"/>
<Node dbConnection="JDBC1" dbTable="dm4_dim_reg" guiName="DBOutputTable" guiX="1003" guiY="442" id="DBOUTPUT_TABLE" type="DB_OUTPUT_TABLE"/>
<Node dbConnection="JDBC1" dbTable="dm4_dim_time" guiName="dm4_dim_time" guiX="1093" guiY="296" id="DM4_DIM_TIME" type="DB_OUTPUT_TABLE"/>
<Node guiName="Filter" guiX="76" guiY="271" id="FILTER" type="EXT_FILTER">
<attr name="filterExpression"><![CDATA[//#CTL2
$in.0.Vbeginn != null]]></attr>
</Node>
<Node dbConnection="JDBC1" guiName="kunde_kfz_infos" guiX="-191" guiY="271" id="KUNDE_KFZ_INFOS" type="DB_INPUT_TABLE">
<attr name="sqlQuery"><![CDATA[select 	`dwh_core`.`h_kunde`.`KuNr`, `dwh_core`.`s_kunde_adresse`.`PLZ`, 
		`dwh_core`.`s_kfz_allgemein`.`Vbeginn`
from `dwh_core`.`h_kunde` 
left outer join `dwh_core`.`s_kunde_adresse` on
	(`dwh_core`.`h_kunde`.`KuNr_Hash` = `dwh_core`.`s_kunde_adresse`.`KuNr_Hash` AND `dwh_core`.`h_kunde`.`Load_DTS` = `dwh_core`.`s_kunde_adresse`.`Load_DTS`)
		left outer join `dwh_core`.`l_kunde_kfz` on  
			(`dwh_core`.`h_kunde`.`KuNr_Hash` = `dwh_core`.`l_kunde_kfz`.`KuNr_Hash` AND `dwh_core`.`h_kunde`.`Load_DTS` = `dwh_core`.`l_kunde_kfz`.`Load_DTS`)
				left outer join `dwh_core`.`s_kfz_allgemein` on 
				(`dwh_core`.`l_kunde_kfz`.`KFZ-VNr_Hash` = `dwh_core`.`s_kfz_allgemein`.`KFZ-VNr_Hash` AND `dwh_core`.`l_kunde_kfz`.`Load_DTS` = `dwh_core`.`s_kfz_allgemein`.`Load_DTS`)]]></attr>
</Node>
<Node guiName="Reformat" guiX="311" guiY="271" id="REFORMAT" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.Vbeginn = getYear($in.0.Vbeginn);
	$out.0.PLZ = $in.0.PLZ;
	$out.0.KuNr = $in.0.KuNr;

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node guiName="Reformat" guiX="877" guiY="296" id="REFORMAT2" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2
integer time_id = 1;

// Transforms input record into output record.
function integer transform() {
	$out.0.Jahr = $in.0.Vbeginn;
	$out.0.Time_Id = time_id++;

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node guiName="Reformat" guiX="835" guiY="442" id="REFORMAT3" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2
integer id = 1;

// Transforms input record into output record.
function integer transform() {
	$out.0.PLZ = $in.0.PLZ;
	$out.0.Reg_Id = id++;

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node guiName="SimpleCopy" guiX="468" guiY="385" id="SIMPLE_COPY" type="SIMPLE_COPY"/>
<Edge fromNode="AGGREGATE:0" guiBendpoints="" guiRouter="Manhattan" id="Edge34" inPort="Port 0 (in)" metadata="Metadata13" outPort="Port 0 (out)" toNode="REFORMAT2:0"/>
<Edge fromNode="AGGREGATE1:0" guiBendpoints="" guiRouter="Manhattan" id="Edge42" inPort="Port 0 (in)" metadata="Metadata13" outPort="Port 0 (out)" toNode="REFORMAT3:0"/>
<Edge fromNode="FILTER:0" guiBendpoints="" guiRouter="Manhattan" id="Edge33" inPort="Port 0 (in)" outPort="Port 0 (accepted)" toNode="REFORMAT:0"/>
<Edge fromNode="KUNDE_KFZ_INFOS:0" guiBendpoints="" guiRouter="Manhattan" id="Edge30" inPort="Port 0 (in)" metadata="Metadata11" outPort="Port 0 (out)" toNode="FILTER:0"/>
<Edge fromNode="REFORMAT:0" guiBendpoints="" guiRouter="Manhattan" id="Edge31" inPort="Port 0 (in)" metadata="Metadata12" outPort="Port 0 (out)" toNode="SIMPLE_COPY:0"/>
<Edge fromNode="REFORMAT2:0" guiBendpoints="" guiRouter="Manhattan" id="Edge36" inPort="Port 0 (in)" metadata="Metadata15" outPort="Port 0 (out)" toNode="DM4_DIM_TIME:0"/>
<Edge fromNode="REFORMAT3:0" guiBendpoints="" guiRouter="Manhattan" id="Edge43" inPort="Port 0 (in)" metadata="Metadata14" outPort="Port 0 (out)" toNode="DBOUTPUT_TABLE:0"/>
<Edge fromNode="SIMPLE_COPY:0" guiBendpoints="" guiRouter="Manhattan" id="Edge40" inPort="Port 0 (in)" outPort="Port 0 (out)" toNode="AGGREGATE:0"/>
<Edge fromNode="SIMPLE_COPY:1" guiBendpoints="" guiRouter="Manhattan" id="Edge41" inPort="Port 0 (in)" outPort="Port 1 (out)" toNode="AGGREGATE1:0"/>
<Edge fromNode="SIMPLE_COPY:2" guiBendpoints="" guiRouter="Manhattan" id="Edge44" inPort="Port 0 (in)" outPort="Port 2 (out)" toNode="AGGREGATE2:0"/>
</Phase>
<Phase number="2">
<Node aggregateKey="PLZ;Vbeginn" guiName="Aggregate" guiX="654" guiY="600" id="AGGREGATE2" mapping="$PLZ:=$PLZ;$Vbeginn:=$Vbeginn;$aggregated:=countnonnull($KuNr);" sorted="false" type="AGGREGATE"/>
<Node dbConnection="JDBC1" dbTable="dm4_fakt_kfzabsjahreg" guiName="DBOutputTable" guiX="1161" guiY="618" id="DBOUTPUT_TABLE1" type="DB_OUTPUT_TABLE"/>
<Node ascendingInputs="true" guiName="ExtMergeJoin" guiX="885" guiY="719" id="EXT_MERGE_JOIN" joinKey="$PLZ(a)#$PLZ(a);" joinType="leftOuter" type="EXT_MERGE_JOIN">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.Reg_Id = $in.1.Reg_Id;
	$out.0.Vbeginn = $in.0.Vbeginn;
	$out.0.aggregated = $in.0.aggregated;

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node ascendingInputs="true" guiName="ExtMergeJoin" guiX="1117" guiY="872" id="EXT_MERGE_JOIN1" joinKey="$Vbeginn(a)#$Jahr(a);" joinType="leftOuter" type="EXT_MERGE_JOIN">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.Time_Id = $in.1.Time_Id;
	$out.0.Reg_Id = $in.0.Reg_Id;
	$out.0.KfzAbsJahReg = $in.0.aggregated;

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node guiName="ExtSort" guiX="876" guiY="600" id="EXT_SORT" sortKey="PLZ(a)" type="EXT_SORT"/>
<Node guiName="lookup_reg" guiX="516" guiY="725" id="LOOKUP_REG" lookupTable="LookupTable0" type="LOOKUP_TABLE_READER_WRITER"/>
<Node guiName="lookuup_time" guiX="852" guiY="872" id="LOOKUUP_TIME" lookupTable="LookupTable1" type="LOOKUP_TABLE_READER_WRITER"/>
<Edge fromNode="AGGREGATE2:0" guiBendpoints="" guiRouter="Manhattan" id="Edge49" inPort="Port 0 (in)" metadata="Metadata13" outPort="Port 0 (out)" toNode="EXT_SORT:0"/>
<Edge fromNode="EXT_MERGE_JOIN:0" guiBendpoints="" guiRouter="Manhattan" id="Edge52" inPort="Port 0 (driver)" metadata="Metadata17" outPort="Port 0 (out)" toNode="EXT_MERGE_JOIN1:0"/>
<Edge fromNode="EXT_MERGE_JOIN1:0" guiBendpoints="" guiRouter="Manhattan" id="Edge55" inPort="Port 0 (in)" metadata="Metadata16" outPort="Port 0 (out)" toNode="DBOUTPUT_TABLE1:0"/>
<Edge fromNode="EXT_SORT:0" guiBendpoints="" guiRouter="Manhattan" id="Edge57" inPort="Port 0 (driver)" outPort="Port 0 (out)" toNode="EXT_MERGE_JOIN:0"/>
<Edge fromNode="LOOKUP_REG:0" guiBendpoints="" guiRouter="Manhattan" id="Edge50" inPort="Port 1 (slave)" metadata="Metadata14" outPort="Port 0 (out)" toNode="EXT_MERGE_JOIN:1"/>
<Edge fromNode="LOOKUUP_TIME:0" guiBendpoints="" guiRouter="Manhattan" id="Edge54" inPort="Port 1 (slave)" metadata="Metadata15" outPort="Port 0 (out)" toNode="EXT_MERGE_JOIN1:1"/>
</Phase>
</Graph>
