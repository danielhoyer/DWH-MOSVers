<?xml version="1.0" encoding="UTF-8"?>
<Graph author="Dan" created="Wed Apr 12 15:26:15 CEST 2017" guiVersion="4.6.0.M1" id="1492004606867" licenseCode="RegCode" name="integration2core" showComponentDetails="true">
<Global>
<Metadata fileURL="${META_DIR}/lookup_kunde.fmt" id="Metadata35"/>
<Metadata id="Metadata0">
<Record fieldDelimiter=";" name="bu_iz" recordDelimiter="\n" type="delimited">
<Field name="VNr" size="30" type="string"/>
<Field format="yyyy-MM-dd HH:mm:ss" name="Zeitstempel" size="19" type="date"/>
<Field name="KuNr" size="30" type="string"/>
<Field length="4" name="Wertbetrag" scale="2" type="decimal"/>
<Field length="4" name="RateMonat" scale="2" type="decimal"/>
<Field length="4" name="RateQuartal" scale="2" type="decimal"/>
<Field length="5" name="RateHalbjahr" scale="2" type="decimal"/>
<Field length="5" name="RateJahr" scale="2" type="decimal"/>
<Field name="Datenquelle" size="30" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata1">
<Record fieldDelimiter=";" name="h_bu" previewAttachmentCharset="UTF-8" recordDelimiter="\n" type="delimited">
<Field format="yyyy-MM-dd HH:mm:ss" name="BU_VNr_Hash" size="19" trim="true" type="string"/>
<Field name="BU_VNr" size="30" type="string"/>
<Field length="4" name="Load_DTS" scale="2" trim="true" type="date"/>
<Field length="4" name="Record_SRC" scale="2" trim="true" type="string"/>
</Record>
</Metadata>
<Metadata id="h_bu">
<Record fieldDelimiter=";" name="h_bu_error" previewAttachmentCharset="UTF-8" recordDelimiter="\n" type="delimited">
<Field format="yyyy-MM-dd HH:mm:ss" name="BU_VNr_Hash" size="19" trim="true" type="string"/>
<Field name="BU_VNr" size="30" type="string"/>
<Field length="4" name="Load_DTS" scale="2" trim="true" type="date"/>
<Field length="4" name="Record_SRC" scale="2" trim="true" type="string"/>
<Field auto_filling="ErrCode" delimiter=";" name="ErrCode" trim="true" type="integer"/>
<Field auto_filling="ErrText" delimiter="\n" name="ErrText" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata2" previewAttachmentCharset="UTF-8">
<Record fieldDelimiter=";" name="h_bu_error_id" previewAttachmentCharset="UTF-8" recordDelimiter="\n" type="delimited">
<Field name="ID_Hash" type="string"/>
<Field name="id" size="30" type="integer"/>
<Field length="4" name="Load_DTS" scale="2" trim="true" type="date"/>
<Field length="4" name="Record_SRC" scale="2" trim="true" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata19">
<Record fieldDelimiter=";" name="h_kfz" recordDelimiter="\n" type="delimited">
<Field label="KFZ-VNr_Hash" name="KFZ_VNr_Hash" size="64" type="string"/>
<Field label="KFZ-VNr" name="KFZ_VNr" size="30" type="string"/>
<Field format="yyyy-MM-dd HH:mm:ss" label="Load_DTS" name="Load_DTS" size="19" type="date"/>
<Field label="Record_SRC" name="Record_SRC" size="30" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata7">
<Record fieldDelimiter=";" name="h_kunde" recordDelimiter="\n" type="delimited">
<Field name="KuNr_Hash" size="64" type="string"/>
<Field name="KuNr" size="30" type="string"/>
<Field format="yyyy-MM-dd HH:mm:ss" name="Load_DTS" size="19" type="date"/>
<Field name="Record_SRC" size="30" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata25">
<Record fieldDelimiter=";" name="h_kv" recordDelimiter="\n" type="delimited">
<Field label="KV-VNr_Hash" name="KV_VNr_Hash" size="64" type="string"/>
<Field label="KV-VNr" name="KV_VNr" size="30" type="string"/>
<Field format="yyyy-MM-dd HH:mm:ss" label="Load_DTS" name="Load_DTS" size="19" trim="true" type="date"/>
<Field label="Record_SRC" name="Record_SRC" size="30" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata30">
<Record fieldDelimiter=";" name="h_lv" recordDelimiter="\n" type="delimited">
<Field label="LV-VNr_Hash" name="LV_VNr_Hash" size="64" type="string"/>
<Field label="LV-VNr" name="LV_VNr" size="30" type="string"/>
<Field format="yyyy-MM-dd HH:mm:ss" label="Load_DTS" name="Load_DTS" size="19" type="date"/>
<Field label="Record_SRC" name="Record_SRC" size="30" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata14">
<Record fieldDelimiter=";" name="h_sach" recordDelimiter="\n" type="delimited">
<Field label="Sach-VNr_Hash" name="Sach_VNr_Hash" size="64" type="string"/>
<Field label="Sach-VNr" name="Sach_VNr" size="30" type="string"/>
<Field format="yyyy-MM-dd HH:mm:ss" label="Load_DTS" name="Load_DTS" size="19" type="date"/>
<Field label="Record_SRC" name="Record_SRC" size="30" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata18">
<Record fieldDelimiter=";" name="kfz" recordDelimiter="\n" type="delimited">
<Field name="VNr" size="30" type="string"/>
<Field format="yyyy-MM-dd HH:mm:ss" name="Zeitstempel" size="19" type="date"/>
<Field name="KuNr" size="30" type="string"/>
<Field name="KFZKZ" size="11" type="string"/>
<Field name="Art" size="1" type="string"/>
<Field length="8" name="Neuwert" scale="2" type="decimal"/>
<Field format="yyyy-MM-dd" name="Erstzulassung" size="10" type="date"/>
<Field format="yyyy-MM-dd" name="Vbeginn" size="10" type="date"/>
<Field length="6" name="HPMonat" scale="2" type="decimal"/>
<Field length="6" name="TKMonat" scale="2" type="decimal"/>
<Field length="6" name="VKMonat" scale="2" type="decimal"/>
<Field name="HPSatz" size="6" type="integer"/>
<Field name="TKSatz" size="6" type="integer"/>
<Field name="VKSatz" size="6" type="integer"/>
<Field length="6" name="SB_TK" scale="2" type="decimal"/>
<Field length="7" name="SBVK" scale="2" type="decimal"/>
<Field length="9" name="Schadensumme_Sach" scale="2" type="decimal"/>
<Field length="10" name="Schadensumme_Person" scale="2" type="decimal"/>
<Field name="Datenquelle" size="30" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata24">
<Record fieldDelimiter=";" name="kv" recordDelimiter="\n" type="delimited">
<Field name="VNr" size="30" type="string"/>
<Field format="yyyy-MM-dd HH:mm:ss" name="Zeitstempel" size="19" type="date"/>
<Field name="KuNr" size="30" type="string"/>
<Field name="Art" size="30" type="string"/>
<Field format="yyyy-MM-dd" name="Vbeginn" size="10" type="date"/>
<Field length="6" name="RateMonat" scale="2" type="decimal"/>
<Field length="7" name="SB" scale="2" type="decimal"/>
<Field length="6" name="R1" scale="2" type="decimal"/>
<Field length="7" name="R2" scale="2" type="decimal"/>
<Field length="7" name="R3" scale="2" type="decimal"/>
<Field name="Datenquelle" size="30" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata12">
<Record fieldDelimiter=";" name="l_kunde_bu" recordDelimiter="\n" type="delimited">
<Field label="KuNr_BU-VNr_CompHash" name="KuNr_BU_VNr_CompHash" size="64" type="string"/>
<Field label="KuNr_Hash" name="KuNr_Hash" size="64" type="string"/>
<Field label="BU-VNr_Hash" name="BU_VNr_Hash" size="64" type="string"/>
<Field format="yyyy-MM-dd HH:mm:ss" label="Load_DTS" name="Load_DTS" size="19" type="date"/>
<Field label="Record_SRC" name="Record_SRC" size="30" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata20">
<Record fieldDelimiter=";" name="l_kunde_kfz" recordDelimiter="\n" type="delimited">
<Field label="KuNr_KFZ-VNr_CompHash" name="KuNr_KFZ_VNr_CompHash" size="64" type="string"/>
<Field label="KuNr_Hash" name="KuNr_Hash" size="64" type="string"/>
<Field label="KFZ-VNr_Hash" name="KFZ_VNr_Hash" size="64" type="string"/>
<Field format="yyyy-MM-dd HH:mm:ss" label="Load_DTS" name="Load_DTS" size="19" type="date"/>
<Field label="Record_SRC" name="Record_SRC" size="30" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata26">
<Record fieldDelimiter=";" name="l_kunde_kv" recordDelimiter="\n" type="delimited">
<Field label="KuNr_KV-VNr_CompHash" name="KuNr_KV_VNr_CompHash" size="64" type="string"/>
<Field label="KuNr_Hash" name="KuNr_Hash" size="64" type="string"/>
<Field label="KV-VNr_Hash" name="KV_VNr_Hash" size="64" type="string"/>
<Field format="yyyy-MM-dd HH:mm:ss" label="Load_DTS" name="Load_DTS" size="19" type="date"/>
<Field label="Record_SRC" name="Record_SRC" size="30" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata31">
<Record fieldDelimiter=";" name="l_kunde_lv" recordDelimiter="\n" type="delimited">
<Field label="KuNr_LV-VNr_CompHash" name="KuNr_LV_VNr_CompHash" size="64" type="string"/>
<Field label="KuNr_Hash" name="KuNr_Hash" size="64" type="string"/>
<Field label="LV-VNr_Hash" name="LV_VNr_Hash" size="64" type="string"/>
<Field format="yyyy-MM-dd HH:mm:ss" label="Load_DTS" name="Load_DTS" size="19" type="date"/>
<Field label="Record_SRC" name="Record_SRC" size="30" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata17">
<Record fieldDelimiter=";" name="l_kunde_sach" recordDelimiter="\n" type="delimited">
<Field label="KuNr_Sach-VNr_CompHash" name="KuNr_Sach_VNr_CompHash" size="64" type="string"/>
<Field label="KuNr_Hash" name="KuNr_Hash" size="64" type="string"/>
<Field label="Sach-VNr_Hash" name="Sach_VNr_Hash" size="64" type="string"/>
<Field format="yyyy-MM-dd HH:mm:ss" label="Load_DTS" name="Load_DTS" size="19" type="date"/>
<Field label="Record_SRC" name="Record_SRC" size="30" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata29">
<Record fieldDelimiter=";" name="lv" recordDelimiter="\n" type="delimited">
<Field label="VNr" name="VNr" size="30" type="string"/>
<Field format="yyyy-MM-dd HH:mm:ss" label="Zeitstempel" name="Zeitstempel" size="19" type="date"/>
<Field label="KuNr" name="KuNr" size="30" type="string"/>
<Field label="Wertfaktor" name="Wertfaktor" size="12" type="number"/>
<Field format="yyyy-MM-dd" label="Vbeginn" name="Vbeginn" size="10" type="date"/>
<Field label="Laufzeit" name="Laufzeit" size="30" type="string"/>
<Field label="RateMonat" length="6" name="RateMonat" scale="2" type="decimal"/>
<Field label="RateQuartal" length="7" name="RateQuartal" scale="2" type="decimal"/>
<Field label="RateHalbjahr" length="7" name="RateHalbjahr" scale="2" type="decimal"/>
<Field label="RateJahr" length="7" name="RateJahr" scale="2" type="decimal"/>
<Field label="BegÃ¼nstigter" name="Begunstigter" size="2" type="string"/>
<Field label="BU" name="BU" size="1" type="string"/>
<Field label="Datenquelle" name="Datenquelle" size="30" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata4">
<Record fieldDelimiter=";" name="s_bu" previewAttachmentCharset="UTF-8" recordDelimiter="\n" type="delimited">
<Field name="BU_VNr_Hash" size="30" type="string"/>
<Field format="yyyy-MM-dd HH:mm:ss" name="Load_DTS" size="19" trim="true" type="date"/>
<Field length="4" name="Wertbetrag" scale="2" trim="true" type="decimal"/>
<Field length="4" name="RateMonat" scale="2" trim="true" type="decimal"/>
<Field length="4" name="RateQuartal" scale="2" trim="true" type="decimal"/>
<Field length="5" name="RateHalbjahr" scale="2" trim="true" type="decimal"/>
<Field length="5" name="RateJahr" scale="2" trim="true" type="decimal"/>
<Field name="Detail_Hash_Diff" size="30" type="string"/>
<Field name="Record_SRC" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata3">
<Record fieldDelimiter=";" name="s_bu_error" previewAttachmentCharset="UTF-8" recordDelimiter="\n" type="delimited">
<Field name="BU_VNr_Hash" size="30" type="string"/>
<Field format="yyyy-MM-dd HH:mm:ss" name="Load_DTS" size="19" trim="true" type="date"/>
<Field length="4" name="Wertbetrag" scale="2" trim="true" type="decimal"/>
<Field length="4" name="RateMonat" scale="2" trim="true" type="decimal"/>
<Field length="4" name="RateQuartal" scale="2" trim="true" type="decimal"/>
<Field length="5" name="RateHalbjahr" scale="2" trim="true" type="decimal"/>
<Field length="5" name="RateJahr" scale="2" trim="true" type="decimal"/>
<Field name="Detail_Hash_Diff" size="30" type="string"/>
<Field delimiter="\n" name="Record_SRC" type="string"/>
<Field name="ErrCode" type="integer"/>
<Field name="ErrMessage" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata5">
<Record fieldDelimiter=";" name="s_error_bu" recordDelimiter="\n" type="delimited">
<Field name="Error_ID_Hash" size="64" type="string"/>
<Field format="yyyy-MM-dd HH:mm:ss" name="Load_DTS" size="19" type="date"/>
<Field name="FehlerCat" size="9" type="string"/>
<Field name="Datensatz" type="byte"/>
<Field name="Erledigt" size="1" type="boolean"/>
<Field name="Detail_Hash_Diff" size="64" type="string"/>
<Field name="Record_SRC" size="30" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata21">
<Record fieldDelimiter=";" name="s_kfz_allgemein" recordDelimiter="\n" type="delimited">
<Field label="KFZ-VNr_Hash" name="KFZ_VNr_Hash" size="64" type="string"/>
<Field format="yyyy-MM-dd HH:mm:ss" label="Load_DTS" name="Load_DTS" size="19" type="date"/>
<Field format="yyyy-MM-dd" label="Vbeginn" name="Vbeginn" size="10" type="date"/>
<Field label="Schadensumme_Sach" length="9" name="Schadensumme_Sach" scale="2" type="decimal"/>
<Field label="Schadensumme_Person" length="10" name="Schadensumme_Person" scale="2" type="decimal"/>
<Field label="Detail_Hash_Diff" name="Detail_Hash_Diff" size="64" type="string"/>
<Field label="Record_SRC" name="Record_SRC" size="30" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata22">
<Record fieldDelimiter=";" name="s_kfz_beitraege" recordDelimiter="\n" type="delimited">
<Field label="KFZ-VNr_Hash" name="KFZ_VNr_Hash" size="64" type="string"/>
<Field format="yyyy-MM-dd HH:mm:ss" label="Load_DTS" name="Load_DTS" size="19" trim="true" type="date"/>
<Field label="HPMonat" length="6" name="HPMonat" scale="2" trim="true" type="decimal"/>
<Field label="TKMonat" length="6" name="TKMonat" scale="2" trim="true" type="decimal"/>
<Field label="VKMonat" length="6" name="VKMonat" scale="2" trim="true" type="decimal"/>
<Field label="HPSatz" name="HPSatz" size="6" trim="true" type="integer"/>
<Field label="TKSatz" name="TKSatz" size="6" trim="true" type="integer"/>
<Field label="VKSatz" name="VKSatz" size="6" trim="true" type="integer"/>
<Field label="SB_TK" length="6" name="SB_TK" scale="2" trim="true" type="decimal"/>
<Field label="SBVK" length="7" name="SBVK" scale="2" trim="true" type="decimal"/>
<Field label="Detail_Hash_Diff" name="Detail_Hash_Diff" size="64" type="string"/>
<Field label="Record_SRC" name="Record_SRC" size="30" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata23">
<Record fieldDelimiter=";" name="s_kfz_fahrzeug" recordDelimiter="\n" type="delimited">
<Field label="KFZ-VNr_Hash" name="KFZ_VNr_Hash" size="64" type="string"/>
<Field format="yyyy-MM-dd HH:mm:ss" label="Load_DTS" name="Load_DTS" size="19" type="date"/>
<Field label="KFZKZ" name="KFZKZ" size="11" type="string"/>
<Field label="Art" name="Art" size="1" type="string"/>
<Field label="Neuwert" length="8" name="Neuwert" scale="2" type="decimal"/>
<Field format="yyyy-MM-dd" label="Erstzulassung" name="Erstzulassung" size="10" type="date"/>
<Field label="Detail_Hash_Diff" name="Detail_Hash_Diff" size="64" type="string"/>
<Field label="Record_SRC" name="Record_SRC" size="30" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata8">
<Record fieldDelimiter=";" name="s_kunde_adresse" recordDelimiter="\n" type="delimited">
<Field name="KuNr_Hash" size="64" type="string"/>
<Field format="yyyy-MM-dd HH:mm:ss" name="Load_DTS" size="19" type="date"/>
<Field name="Strasse" size="255" type="string"/>
<Field name="HNr" size="30" type="string"/>
<Field name="PLZ" size="11" type="integer"/>
<Field name="Ort" size="255" type="string"/>
<Field name="Detail_Hash_Diff" size="64" type="string"/>
<Field name="Record_SRC" size="30" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata9">
<Record fieldDelimiter=";" name="s_kunde_allgemein" recordDelimiter="\n" type="delimited">
<Field name="KuNr_Hash" size="64" type="string"/>
<Field format="yyyy-MM-dd HH:mm:ss" name="Load_DTS" size="19" type="date"/>
<Field name="Name" size="255" type="string"/>
<Field name="Vorname_1" size="30" type="string"/>
<Field name="Vorname_2" size="30" type="string"/>
<Field format="yyyy-MM-dd" name="GebDat" size="10" type="date"/>
<Field name="GebOrt" size="255" type="string"/>
<Field name="Detail_Hash_Diff" size="64" type="string"/>
<Field name="Record_SRC" size="30" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata10">
<Record fieldDelimiter=";" name="s_kunde_familie" recordDelimiter="\n" type="delimited">
<Field name="KuNr_Hash" size="64" type="string"/>
<Field format="yyyy-MM-dd HH:mm:ss" name="Load_DTS" size="19" type="date"/>
<Field name="FamStand" size="30" type="string"/>
<Field name="Anz_Kinder" size="4" type="integer"/>
<Field name="Anz_Kinder_MV" size="4" type="integer"/>
<Field name="Ehepart_MV" size="1" type="string"/>
<Field name="Detail_Hash_Diff" size="64" type="string"/>
<Field name="Record_SRC" size="30" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata11">
<Record fieldDelimiter=";" name="s_kunde_kontakt" recordDelimiter="\n" type="delimited">
<Field name="KuNr_Hash" size="64" type="string"/>
<Field format="yyyy-MM-dd HH:mm:ss" name="Load_DTS" size="19" type="date"/>
<Field name="Tel_priv" size="30" type="string"/>
<Field name="Tel_Arbeit" size="30" type="string"/>
<Field name="Mobil" size="30" type="string"/>
<Field name="Fax" size="30" type="string"/>
<Field name="eMail_1" size="255" type="string"/>
<Field name="eMail_2" size="255" type="string"/>
<Field name="Prio_Kontakt" size="1" type="string"/>
<Field name="Detail_Hash_Diff" size="64" type="string"/>
<Field name="Record_SRC" size="30" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata27">
<Record fieldDelimiter=";" name="s_kv_allgemein" recordDelimiter="\n" type="delimited">
<Field label="KV-VNr_Hash" name="KV_VNr_Hash" size="64" type="string"/>
<Field format="yyyy-MM-dd HH:mm:ss" label="Load_DTS" name="Load_DTS" size="19" type="date"/>
<Field label="Art" name="Art" size="30" type="string"/>
<Field format="yyyy-MM-dd" label="Vbeginn" name="Vbeginn" size="10" type="date"/>
<Field label="SB" length="7" name="SB" scale="2" type="decimal"/>
<Field label="Detail_Hash_Diff" name="Detail_Hash_Diff" size="64" type="string"/>
<Field label="Record_SRC" name="Record_SRC" size="30" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata28">
<Record fieldDelimiter=";" name="s_kv_beitraege" recordDelimiter="\n" type="delimited">
<Field label="KV-VNr_Hash" name="KV_VNr_Hash" size="64" type="string"/>
<Field format="yyyy-MM-dd HH:mm:ss" label="Load_DTS" name="Load_DTS" size="19" type="date"/>
<Field label="RateMonat" length="6" name="RateMonat" scale="2" type="decimal"/>
<Field label="R1" length="6" name="R1" scale="2" type="decimal"/>
<Field label="R2" length="7" name="R2" scale="2" type="decimal"/>
<Field label="R3" length="7" name="R3" scale="2" type="decimal"/>
<Field label="Detail_Hash_Diff" name="Detail_Hash_Diff" size="64" type="string"/>
<Field label="Record_SRC" name="Record_SRC" size="30" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata32">
<Record fieldDelimiter=";" name="s_lv_allgemein" recordDelimiter="\n" type="delimited">
<Field label="LU-VNr_Hash" name="LU_VNr_Hash" size="64" type="string"/>
<Field format="yyyy-MM-dd HH:mm:ss" label="Load_DTS" name="Load_DTS" size="19" type="date"/>
<Field format="yyyy-MM-dd" label="Vbeginn" name="Vbeginn" size="10" type="date"/>
<Field label="Laufzeit" name="Laufzeit" size="30" type="string"/>
<Field label="Detail_Hash_Diff" name="Detail_Hash_Diff" size="64" type="string"/>
<Field label="Record_SRC" name="Record_SRC" size="30" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata33">
<Record fieldDelimiter=";" name="s_lv_beitraege" recordDelimiter="\n" type="delimited">
<Field label="LU-VNr_Hash" name="LU_VNr_Hash" size="64" type="string"/>
<Field format="yyyy-MM-dd HH:mm:ss" label="Load_DTS" name="Load_DTS" size="19" type="date"/>
<Field label="Wertfaktor" length="4" name="Wertfaktor" scale="2" type="decimal"/>
<Field label="RateMonat" length="6" name="RateMonat" scale="2" type="decimal"/>
<Field label="RateQuartal" length="7" name="RateQuartal" scale="2" type="decimal"/>
<Field label="RateHalbjahr" length="7" name="RateHalbjahr" scale="2" type="decimal"/>
<Field label="RateJahr" length="7" name="RateJahr" scale="2" type="decimal"/>
<Field label="Detail_Hash_Diff" name="Detail_Hash_Diff" size="64" type="string"/>
<Field label="Record_SRC" name="Record_SRC" size="30" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata34">
<Record fieldDelimiter=";" name="s_lv_erben" recordDelimiter="\n" type="delimited">
<Field label="LU-VNr_Hash" name="LU_VNr_Hash" size="64" type="string"/>
<Field format="yyyy-MM-dd HH:mm:ss" label="Load_DTS" name="Load_DTS" size="19" type="date"/>
<Field label="BegÃ¼nstigter" name="Begunstigter" size="2" type="string"/>
<Field label="BU" name="BU" size="1" type="string"/>
<Field label="Detail_Hash_Diff" name="Detail_Hash_Diff" size="64" type="string"/>
<Field label="Record_SRC" name="Record_SRC" size="30" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata15">
<Record fieldDelimiter=";" name="s_sach_allgemein" recordDelimiter="\n" type="delimited">
<Field label="Sach-VNr_Hash" name="Sach_VNr_Hash" size="64" type="string"/>
<Field format="yyyy-MM-dd HH:mm:ss" label="Load_DTS" name="Load_DTS" size="19" type="date"/>
<Field label="Art" name="Art" size="3" type="string"/>
<Field format="yyyy-MM-dd" label="Vbeginn" name="Vbeginn" size="10" type="date"/>
<Field label="Laufzeit" name="Laufzeit" size="4" type="integer"/>
<Field label="KFrist" name="KFrist" size="4" type="integer"/>
<Field label="Detail_Hash_Diff" name="Detail_Hash_Diff" size="64" type="string"/>
<Field label="Record_SRC" name="Record_SRC" size="30" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata16">
<Record fieldDelimiter=";" name="s_sach_beitraege" recordDelimiter="\n" type="delimited">
<Field label="Sach-VNr_Hash" name="Sach_VNr_Hash" size="64" type="string"/>
<Field format="yyyy-MM-dd HH:mm:ss" label="Load_DTS" name="Load_DTS" size="19" trim="true" type="date"/>
<Field label="VWert" length="8" name="VWert" scale="2" trim="true" type="decimal"/>
<Field label="RateMonat" length="5" name="RateMonat" scale="2" trim="true" type="decimal"/>
<Field label="RateQuartal" length="5" name="RateQuartal" scale="2" trim="true" type="decimal"/>
<Field label="RateHalbjahr" length="6" name="RateHalbjahr" scale="2" trim="true" type="decimal"/>
<Field label="RateJahr" length="6" name="RateJahr" scale="2" trim="true" type="decimal"/>
<Field label="Detail_Hash_Diff" name="Detail_Hash_Diff" size="64" type="string"/>
<Field label="Record_SRC" name="Record_SRC" size="30" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata13">
<Record fieldDelimiter=";" name="sach" recordDelimiter="\n" type="delimited">
<Field name="VNr" size="30" type="string"/>
<Field format="yyyy-MM-dd HH:mm:ss" name="Zeitstempel" size="19" type="date"/>
<Field name="KuNr" size="30" type="string"/>
<Field name="Art" size="3" type="string"/>
<Field length="8" name="VWert" scale="2" type="decimal"/>
<Field format="yyyy-MM-dd" name="Vbeginn" size="10" type="date"/>
<Field name="Laufzeit" size="4" type="integer"/>
<Field name="KFrist" size="4" type="integer"/>
<Field length="5" name="RateMonat" scale="2" type="decimal"/>
<Field length="5" name="RateQuartal" scale="2" type="decimal"/>
<Field length="6" name="RateHalbjahr" scale="2" type="decimal"/>
<Field length="6" name="RateJahr" scale="2" type="decimal"/>
<Field name="Datenquelle" size="30" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata6">
<Record fieldDelimiter=";" name="stammdaten" recordDelimiter="\n" type="delimited">
<Field name="KuNr" size="30" type="string"/>
<Field name="Name" size="255" type="string"/>
<Field name="Vorname_1" size="30" type="string"/>
<Field name="Vorname_2" size="30" type="string"/>
<Field format="yyyy-MM-dd" name="GebDat" size="10" type="date"/>
<Field name="GebOrt" size="255" type="string"/>
<Field name="Strasse" size="255" type="string"/>
<Field name="HNr" size="30" type="string"/>
<Field name="PLZ" size="11" type="integer"/>
<Field name="Ort" size="255" type="string"/>
<Field name="Tel_priv" size="30" type="string"/>
<Field name="Tel_Arbeit" size="30" type="string"/>
<Field name="Mobil" size="30" type="string"/>
<Field name="Fax" size="30" type="string"/>
<Field name="eMail_1" size="255" type="string"/>
<Field name="eMail_2" size="255" type="string"/>
<Field name="Prio_Kontakt" size="1" type="string"/>
<Field name="FamStand" size="30" type="string"/>
<Field name="Anz_Kinder" size="4" type="integer"/>
<Field name="Anz_Kinder_MV" size="4" type="integer"/>
<Field name="Ehepart_MV" size="1" type="string"/>
<Field format="yyyy-MM-dd HH:mm:ss" name="Zeitstempel" size="19" type="date"/>
<Field name="Datenquelle" size="30" type="string"/>
</Record>
</Metadata>
<Connection database="MYSQL" dbURL="jdbc:mysql://localhost:3306/dwh_core?user=root" id="JDBC0" jdbcSpecific="MYSQL" name="dwh_core" password="toor" type="JDBC" user="root"/>
<Connection database="MYSQL" dbURL="jdbc:mysql://localhost:3306/dwh_sa_iz?user=root" id="JDBC1" jdbcSpecific="MYSQL" name="dwh_sa_iz" password="toor" type="JDBC" user="root"/>
<GraphParameters>
<GraphParameterFile fileURL="workspace.prm"/>
</GraphParameters>
<Sequence cached="1000" id="Sequence0" name="error_id" start="1" step="1" type="PRIMITIVE_SEQUENCE"/>
<LookupTable id="LookupTable1" lookupConfig="${LOOKUP_DIR}/simpleLookup1.cfg"/>
<Dictionary>
<Entry dictval.value="1" input="true" name="error_id" output="true" type="integer"/>
</Dictionary>
</Global>
<Phase number="0">
<Node dbConnection="JDBC0" guiName="DBExecute" guiX="86" guiY="-165" id="DBEXECUTE" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[TRUNCATE `dwh_core`.`h_bu`;
TRUNCATE `dwh_core`.`h_error`;
TRUNCATE `dwh_core`.`h_kfz`;
TRUNCATE `dwh_core`.`h_kunde`;
TRUNCATE `dwh_core`.`h_kv`;
TRUNCATE `dwh_core`.`h_lv`;
TRUNCATE `dwh_core`.`h_sach`;
TRUNCATE `dwh_core`.`l_kunde_bu`;
TRUNCATE `dwh_core`.`l_kunde_kfz`;
TRUNCATE `dwh_core`.`l_kunde_kv`;
TRUNCATE `dwh_core`.`l_kunde_lv`;
TRUNCATE `dwh_core`.`l_kunde_sach`;
TRUNCATE `dwh_core`.`s_bu`;
TRUNCATE `dwh_core`.`s_error`;
TRUNCATE `dwh_core`.`s_kfz_allgemein`;
TRUNCATE `dwh_core`.`s_kfz_beitraege`;
TRUNCATE `dwh_core`.`s_kfz_fahrzeug`;
TRUNCATE `dwh_core`.`s_kunde_adresse`;
TRUNCATE `dwh_core`.`s_kunde_allgemein`;
TRUNCATE `dwh_core`.`s_kunde_kontakt`;
TRUNCATE `dwh_core`.`s_kunde_familie`;
TRUNCATE `dwh_core`.`s_kv_allgemein`;
TRUNCATE `dwh_core`.`s_kv_beitraege`;
TRUNCATE `dwh_core`.`s_lv_allgemein`;
TRUNCATE `dwh_core`.`s_lv_beitraege`;
TRUNCATE `dwh_core`.`s_lv_erben`;
TRUNCATE `dwh_core`.`s_sach_allgemein`;
TRUNCATE `dwh_core`.`s_sach_beitraege`;]]></attr>
</Node>
</Phase>
<Phase number="1">
<Node dbConnection="JDBC0" dbTable="h_error" guiName="h_error" guiX="1120" guiY="538" id="H_ERROR3" type="DB_OUTPUT_TABLE"/>
<Node dbConnection="JDBC0" dbTable="h_error" guiName="h_error" guiX="1247" guiY="739" id="H_ERROR4" type="DB_OUTPUT_TABLE"/>
<Node dbConnection="JDBC0" dbTable="h_error" guiName="h_error" guiX="1365" guiY="966" id="H_ERROR5" type="DB_OUTPUT_TABLE"/>
<Node dbConnection="JDBC0" dbTable="h_error" guiName="h_error" guiX="1288" guiY="1214" id="H_ERROR6" type="DB_OUTPUT_TABLE"/>
<Node dbConnection="JDBC0" dbTable="h_error" guiName="h_error" guiX="1227" guiY="1466" id="H_ERROR7" type="DB_OUTPUT_TABLE"/>
<Node dbConnection="JDBC0" dbTable="h_kunde" guiName="h_kunde" guiX="559" guiY="538" id="H_KUNDE" maxErrors="1000" type="DB_OUTPUT_TABLE"/>
<Node guiName="LookupTableReaderWriter" guiX="516" guiY="1134" id="LOOKUP_TABLE_READER_WRITER" lookupTable="LookupTable1" type="LOOKUP_TABLE_READER_WRITER"/>
<Node guiName="Reformat" guiX="247" guiY="538" id="REFORMAT4" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.KuNr_Hash = byte2hex(sha256($in.0.KuNr));
	$out.1.KuNr_Hash = byte2hex(sha256($in.0.KuNr));
	$out.2.KuNr_Hash = byte2hex(sha256($in.0.KuNr));
	$out.3.KuNr_Hash = byte2hex(sha256($in.0.KuNr));
	$out.4.KuNr_Hash = byte2hex(sha256($in.0.KuNr));
	$out.0.KuNr = $in.0.KuNr;
	$out.0.Load_DTS = $in.0.Zeitstempel;
	$out.0.Record_SRC = $in.0.Datenquelle;
	$out.1.Load_DTS = $in.0.Zeitstempel;
	$out.1.Record_SRC = $in.0.Datenquelle;
	$out.2.Load_DTS = $in.0.Zeitstempel;
	$out.2.Record_SRC = $in.0.Datenquelle;
	$out.3.Load_DTS = $in.0.Zeitstempel;
	$out.3.Record_SRC = $in.0.Datenquelle;
	$out.4.Load_DTS = $in.0.Zeitstempel;
	$out.4.Record_SRC = $in.0.Datenquelle;
	$out.1.Strasse = $in.0.Strasse;
	$out.1.HNr = $in.0.HNr;
	$out.1.PLZ = $in.0.PLZ;
	$out.1.Ort = $in.0.Ort;
	$out.2.Name = $in.0.Name;
	$out.2.Vorname_1 = $in.0.Vorname_1;
	$out.2.Vorname_2 = $in.0.Vorname_2;
	$out.2.GebDat = $in.0.GebDat;
	$out.2.GebOrt = $in.0.GebOrt;
	$out.3.Tel_priv = $in.0.Tel_priv;
	$out.3.Tel_Arbeit = $in.0.Tel_Arbeit;
	$out.3.Mobil = $in.0.Mobil;
	$out.3.Fax = $in.0.Fax;
	$out.3.eMail_1 = $in.0.eMail_1;
	$out.3.eMail_2 = $in.0.eMail_2;
	$out.3.Prio_Kontakt = $in.0.Prio_Kontakt;
	$out.4.FamStand = $in.0.FamStand;
	$out.4.Anz_Kinder = $in.0.Anz_Kinder;
	$out.4.Anz_Kinder_MV = $in.0.Anz_Kinder_MV;
	$out.4.Ehepart_MV = $in.0.Ehepart_MV;
	$out.1.Detail_Hash_Diff = byte2hex(sha256(concatWithSeparator("~",date2str($in.0.Zeitstempel, "yyyy-MM-dd HH:mm:ss", "de.DE"), $in.0.Strasse, $in.0.HNr, toString($in.0.PLZ), $in.0.Ort,$in.0.Datenquelle)));
	$out.3.Detail_Hash_Diff = byte2hex(sha256(concatWithSeparator("~",date2str($in.0.Zeitstempel, "yyyy-MM-dd HH:mm:ss", "de.DE"), $in.0.Tel_priv, $in.0.Tel_Arbeit, $in.0.Mobil, $in.0.Fax, $in.0.eMail_1, $in.0.eMail_2, $in.0.Prio_Kontakt, toString($in.0.PLZ), $in.0.Ort,$in.0.Datenquelle)));
	$out.2.Detail_Hash_Diff = byte2hex(sha256(concatWithSeparator("~",date2str($in.0.Zeitstempel, "yyyy-MM-dd HH:mm:ss", "de.DE"), $in.0.Name, $in.0.Vorname_1, $in.0.Vorname_2, date2str($in.0.GebDat, "yyyy-MM-dd HH:mm:ss", "de.DE"), $in.0.GebOrt, $in.0.Datenquelle)));
	$out.4.Detail_Hash_Diff = byte2hex(sha256(concatWithSeparator("~",date2str($in.0.Zeitstempel, "yyyy-MM-dd HH:mm:ss", "de.DE"), $in.0.FamStand, toString($in.0.Anz_Kinder), toString($in.0.Anz_Kinder_MV), $in.0.Ehepart_MV,$in.0.Datenquelle)));
	$out.5.KuNr = $in.0.KuNr;

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node guiName="Reformat" guiX="853" guiY="538" id="REFORMAT5" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2
date now = today();
string Record_SRC = "dwh_sa_iz.stammdaten";
string category = "business";
boolean done = false;

// Transforms input record into output record.
function integer transform() {
	$out.0.id = dictionary.error_id++;
	$out.0.Load_DTS = now;
	$out.0.Record_SRC = Record_SRC;
	$out.0.ID_Hash = byte2hex(sha256(num2str(dictionary.error_id)));
	$out.1.Error_ID_Hash = byte2hex(sha256(num2str(dictionary.error_id)));
	$out.1.Load_DTS = now;
	$out.1.FehlerCat = category;
	$out.1.Erledigt = done;
	$out.1.Record_SRC = Record_SRC;
	$out.1.Datensatz = str2byte(concatWithSeparator("~", $in.0.KuNr_Hash, $in.0.KuNr, date2str($in.0.Load_DTS, "yyyy-MM-dd HH:mm:ss", "de.DE"), $in.0.Record_SRC, num2str($in.0.ErrCode), $in.0.ErrText), "UTF-8");

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node guiName="Reformat" guiX="980" guiY="739" id="REFORMAT6" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2
date now = today();
string Record_SRC = "dwh_sa_iz.stammdaten";
string category = "business";
boolean done = false;

// Transforms input record into output record.
function integer transform() {
	$out.0.id = dictionary.error_id++;
	$out.0.Load_DTS = now;
	$out.0.Record_SRC = Record_SRC;
	$out.0.ID_Hash = byte2hex(sha256(num2str(dictionary.error_id)));
	$out.1.Error_ID_Hash = byte2hex(sha256(num2str(dictionary.error_id)));
	$out.1.Load_DTS = now;
	$out.1.FehlerCat = category;
	$out.1.Erledigt = done;
	$out.1.Record_SRC = Record_SRC;
	$out.1.Datensatz = str2byte(concatWithSeparator("~", $in.0.KuNr_Hash, date2str($in.0.Load_DTS, "yyyy-MM-dd HH:mm:ss", "de.DE"), $in.0.Strasse, $in.0.HNr, toString($in.0.PLZ), $in.0.Ort, $in.0.Detail_Hash_Diff, $in.0.Record_SRC, num2str($in.0.ErrCode), $in.0.ErrText), "UTF-8");

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node guiName="Reformat" guiX="1098" guiY="966" id="REFORMAT7" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2
date now = today();
string Record_SRC = "dwh_sa_iz.stammdaten";
string category = "business";
boolean done = false;

// Transforms input record into output record.
function integer transform() {
	$out.0.id = dictionary.error_id++;
	$out.0.Load_DTS = now;
	$out.0.Record_SRC = Record_SRC;
	$out.0.ID_Hash = byte2hex(sha256(num2str(dictionary.error_id)));
	$out.1.Error_ID_Hash = byte2hex(sha256(num2str(dictionary.error_id)));
	$out.1.Load_DTS = now;
	$out.1.FehlerCat = category;
	$out.1.Erledigt = done;
	$out.1.Record_SRC = Record_SRC;
	$out.1.Datensatz = str2byte(concatWithSeparator("~", $in.0.KuNr_Hash, date2str($in.0.Load_DTS, "yyyy-MM-dd HH:mm:ss", "de.DE"), $in.0.Name, $in.0.Vorname_1, $in.0.Vorname_2, date2str($in.0.GebDat, "yyyy-MM-dd HH:mm:ss", "de.DE"), $in.0.GebOrt, $in.0.Detail_Hash_Diff, $in.0.Record_SRC, num2str($in.0.ErrCode), $in.0.ErrText), "UTF-8");

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node guiName="Reformat" guiX="1021" guiY="1214" id="REFORMAT8" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2
date now = today();
string Record_SRC = "dwh_sa_iz.stammdaten";
string category = "business";
boolean done = false;

// Transforms input record into output record.
function integer transform() {
	$out.0.id = dictionary.error_id++;
	$out.0.Load_DTS = now;
	$out.0.Record_SRC = Record_SRC;
	$out.0.ID_Hash = byte2hex(sha256(num2str(dictionary.error_id)));
	$out.1.Error_ID_Hash = byte2hex(sha256(num2str(dictionary.error_id)));
	$out.1.Load_DTS = now;
	$out.1.FehlerCat = category;
	$out.1.Erledigt = done;
	$out.1.Record_SRC = Record_SRC;
	$out.1.Datensatz = str2byte(concatWithSeparator("~", $in.0.KuNr_Hash, date2str($in.0.Load_DTS, "yyyy-MM-dd HH:mm:ss", "de.DE"), $in.0.Tel_priv, $in.0.Tel_Arbeit, $in.0.Mobil, $in.0.Fax, $in.0.eMail_1, $in.0.eMail_2, $in.0.Prio_Kontakt,$in.0.Detail_Hash_Diff, $in.0.Record_SRC, num2str($in.0.ErrCode), $in.0.ErrText), "UTF-8");

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node guiName="Reformat" guiX="960" guiY="1466" id="REFORMAT9" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2
date now = today();
string Record_SRC = "dwh_sa_iz.stammdaten";
string category = "business";
boolean done = false;

// Transforms input record into output record.
function integer transform() {
	$out.0.id = dictionary.error_id++;
	$out.0.Load_DTS = now;
	$out.0.Record_SRC = Record_SRC;
	$out.0.ID_Hash = byte2hex(sha256(num2str(dictionary.error_id)));
	$out.1.Error_ID_Hash = byte2hex(sha256(num2str(dictionary.error_id)));
	$out.1.Load_DTS = now;
	$out.1.FehlerCat = category;
	$out.1.Erledigt = done;
	$out.1.Record_SRC = Record_SRC;
	$out.1.Datensatz = str2byte(concatWithSeparator("~", $in.0.KuNr_Hash, date2str($in.0.Load_DTS, "yyyy-MM-dd HH:mm:ss", "de.DE"), $in.0.FamStand, toString($in.0.Anz_Kinder), toString($in.0.Anz_Kinder_MV), $in.0.Ehepart_MV,$in.0.Detail_Hash_Diff, $in.0.Record_SRC, num2str($in.0.ErrCode), $in.0.ErrText), "UTF-8");

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node dbConnection="JDBC1" guiName="stammdaten" guiX="-32" guiY="538" id="STAMMDATEN" type="DB_INPUT_TABLE">
<attr name="sqlQuery"><![CDATA[select * from `dwh_sa_iz`.`stammdaten`]]></attr>
</Node>
<Node dbConnection="JDBC0" dbTable="s_error" guiName="s_error" guiX="1115" guiY="647" id="S_ERROR3" type="DB_OUTPUT_TABLE"/>
<Node dbConnection="JDBC0" dbTable="s_error" guiName="s_error" guiX="1242" guiY="848" id="S_ERROR4" type="DB_OUTPUT_TABLE"/>
<Node dbConnection="JDBC0" dbTable="s_error" guiName="s_error" guiX="1360" guiY="1075" id="S_ERROR5" type="DB_OUTPUT_TABLE"/>
<Node dbConnection="JDBC0" dbTable="s_error" guiName="s_error" guiX="1283" guiY="1323" id="S_ERROR6" type="DB_OUTPUT_TABLE"/>
<Node dbConnection="JDBC0" dbTable="s_error" guiName="s_error" guiX="1222" guiY="1575" id="S_ERROR7" type="DB_OUTPUT_TABLE"/>
<Node dbConnection="JDBC0" dbTable="s_kunde_adresse" guiName="s_kunde_adresse" guiX="559" guiY="668" id="S_KUNDE_ADRESSE" maxErrors="1000" type="DB_OUTPUT_TABLE"/>
<Node dbConnection="JDBC0" dbTable="s_kunde_allgemein" guiName="s_kunde_allgemein" guiX="559" guiY="755" id="S_KUNDE_ALLGEMEIN" maxErrors="1000" type="DB_OUTPUT_TABLE"/>
<Node dbConnection="JDBC0" dbTable="s_kunde_familie" guiName="s_kunde_familie" guiX="558" guiY="978" id="S_KUNDE_FAMILIE" maxErrors="1000" type="DB_OUTPUT_TABLE"/>
<Node dbConnection="JDBC0" dbTable="s_kunde_kontakt" guiName="s_kunde_kontakt" guiX="559" guiY="843" id="S_KUNDE_KONTAKT" maxErrors="1000" type="DB_OUTPUT_TABLE"/>
<Edge fromNode="H_KUNDE:0" guiBendpoints="" guiRouter="Manhattan" id="Edge32" inPort="Port 0 (in)" outPort="Port 0 (rejected)" toNode="REFORMAT5:0"/>
<Edge fromNode="REFORMAT4:0" guiBendpoints="" guiRouter="Manhattan" id="Edge21" inPort="Port 0 (in)" metadata="Metadata7" outPort="Port 0 (out)" toNode="H_KUNDE:0"/>
<Edge fromNode="REFORMAT4:1" guiBendpoints="" guiRouter="Manhattan" id="Edge22" inPort="Port 0 (in)" metadata="Metadata8" outPort="Port 1 (out)" toNode="S_KUNDE_ADRESSE:0"/>
<Edge fromNode="REFORMAT4:2" guiBendpoints="" guiRouter="Manhattan" id="Edge23" inPort="Port 0 (in)" metadata="Metadata9" outPort="Port 2 (out)" toNode="S_KUNDE_ALLGEMEIN:0"/>
<Edge fromNode="REFORMAT4:3" guiBendpoints="" guiRouter="Manhattan" id="Edge24" inPort="Port 0 (in)" metadata="Metadata11" outPort="Port 3 (out)" toNode="S_KUNDE_KONTAKT:0"/>
<Edge fromNode="REFORMAT4:4" guiBendpoints="" guiRouter="Manhattan" id="Edge25" inPort="Port 0 (in)" metadata="Metadata10" outPort="Port 4 (out)" toNode="S_KUNDE_FAMILIE:0"/>
<Edge fromNode="REFORMAT4:5" guiBendpoints="" guiRouter="Manhattan" id="Edge115" inPort="Port 0 (in)" metadata="Metadata35" outPort="Port 5 (out)" toNode="LOOKUP_TABLE_READER_WRITER:0"/>
<Edge fromNode="REFORMAT5:0" guiBendpoints="" guiRouter="Manhattan" id="Edge33" inPort="Port 0 (in)" metadata="Metadata2" outPort="Port 0 (out)" toNode="H_ERROR3:0"/>
<Edge fromNode="REFORMAT5:1" guiBendpoints="" guiRouter="Manhattan" id="Edge34" inPort="Port 0 (in)" metadata="Metadata5" outPort="Port 1 (out)" toNode="S_ERROR3:0"/>
<Edge fromNode="REFORMAT6:0" guiBendpoints="" guiRouter="Manhattan" id="Edge36" inPort="Port 0 (in)" metadata="Metadata2" outPort="Port 0 (out)" toNode="H_ERROR4:0"/>
<Edge fromNode="REFORMAT6:1" guiBendpoints="" guiRouter="Manhattan" id="Edge35" inPort="Port 0 (in)" metadata="Metadata5" outPort="Port 1 (out)" toNode="S_ERROR4:0"/>
<Edge fromNode="REFORMAT7:0" guiBendpoints="" guiRouter="Manhattan" id="Edge39" inPort="Port 0 (in)" metadata="Metadata2" outPort="Port 0 (out)" toNode="H_ERROR5:0"/>
<Edge fromNode="REFORMAT7:1" guiBendpoints="" guiRouter="Manhattan" id="Edge38" inPort="Port 0 (in)" metadata="Metadata5" outPort="Port 1 (out)" toNode="S_ERROR5:0"/>
<Edge fromNode="REFORMAT8:0" guiBendpoints="" guiRouter="Manhattan" id="Edge42" inPort="Port 0 (in)" metadata="Metadata2" outPort="Port 0 (out)" toNode="H_ERROR6:0"/>
<Edge fromNode="REFORMAT8:1" guiBendpoints="" guiRouter="Manhattan" id="Edge41" inPort="Port 0 (in)" metadata="Metadata5" outPort="Port 1 (out)" toNode="S_ERROR6:0"/>
<Edge fromNode="REFORMAT9:0" guiBendpoints="" guiRouter="Manhattan" id="Edge45" inPort="Port 0 (in)" metadata="Metadata2" outPort="Port 0 (out)" toNode="H_ERROR7:0"/>
<Edge fromNode="REFORMAT9:1" guiBendpoints="" guiRouter="Manhattan" id="Edge44" inPort="Port 0 (in)" metadata="Metadata5" outPort="Port 1 (out)" toNode="S_ERROR7:0"/>
<Edge fromNode="STAMMDATEN:0" guiBendpoints="" guiRouter="Manhattan" id="Edge20" inPort="Port 0 (in)" metadata="Metadata6" outPort="Port 0 (out)" toNode="REFORMAT4:0"/>
<Edge fromNode="S_KUNDE_ADRESSE:0" guiBendpoints="" guiRouter="Manhattan" id="Edge37" inPort="Port 0 (in)" outPort="Port 0 (rejected)" toNode="REFORMAT6:0"/>
<Edge fromNode="S_KUNDE_ALLGEMEIN:0" guiBendpoints="" guiRouter="Manhattan" id="Edge40" inPort="Port 0 (in)" outPort="Port 0 (rejected)" toNode="REFORMAT7:0"/>
<Edge fromNode="S_KUNDE_FAMILIE:0" guiBendpoints="" guiRouter="Manhattan" id="Edge46" inPort="Port 0 (in)" outPort="Port 0 (rejected)" toNode="REFORMAT9:0"/>
<Edge fromNode="S_KUNDE_KONTAKT:0" guiBendpoints="" guiRouter="Manhattan" id="Edge43" inPort="Port 0 (in)" outPort="Port 0 (rejected)" toNode="REFORMAT8:0"/>
</Phase>
<Phase number="2">
<Node dbConnection="JDBC1" guiName="bu" guiX="-41" guiY="75" id="BU" type="DB_INPUT_TABLE">
<attr name="sqlQuery"><![CDATA[SELECT * FROM bu;]]></attr>
</Node>
<Node dbConnection="JDBC0" dbTable="h_bu" errorAction="COMMIT" guiName="h_bu" guiX="596" guiY="76" id="H_BU" maxErrors="1000" type="DB_OUTPUT_TABLE"/>
<Node dbConnection="JDBC0" dbTable="h_error" guiName="h_error" guiX="1164" guiY="-37" id="H_ERROR" type="DB_OUTPUT_TABLE"/>
<Node dbConnection="JDBC0" dbTable="h_error" guiName="h_error" guiX="853" guiY="324" id="H_ERROR1" type="DB_OUTPUT_TABLE"/>
<Node dbConnection="JDBC0" dbTable="h_error" guiName="h_error" guiX="1164" guiY="169" id="H_ERROR2" type="DB_OUTPUT_TABLE"/>
<Node dbConnection="JDBC0" dbTable="h_error" guiName="h_error" guiX="1161" guiY="-272" id="H_ERROR8" type="DB_OUTPUT_TABLE"/>
<Node guiName="ku_nr != null" guiX="141" guiY="76" id="KU_NR_NULL" type="EXT_FILTER">
<attr name="filterExpression"><![CDATA[//#CTL2
$in.0.KuNr != null AND lookup(simpleLookup1).get($in.0.KuNr) != null]]></attr>
</Node>
<Node dbConnection="JDBC0" dbTable="l_kunde_bu" guiName="l_kunde_bu" guiX="596" guiY="-22" id="L_KUNDE_BU" type="DB_OUTPUT_TABLE"/>
<Node guiName="Reformat" guiX="408" guiY="76" id="REFORMAT" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.BU_VNr_Hash = byte2hex(sha256($in.0.VNr));
	$out.0.Load_DTS = $in.0.Zeitstempel;
	$out.0.BU_VNr = $in.0.VNr;
	$out.0.Record_SRC = $in.0.Datenquelle;
	$out.1.BU_VNr_Hash = byte2hex(sha256($in.0.VNr));
	$out.1.Load_DTS = $in.0.Zeitstempel;
	$out.1.Wertbetrag = $in.0.Wertbetrag;
	$out.1.RateMonat = $in.0.RateMonat;
	$out.1.RateQuartal = $in.0.RateQuartal;
	$out.1.RateHalbjahr = $in.0.RateHalbjahr;
	$out.1.RateJahr = $in.0.RateJahr;
	$out.1.Record_SRC = $in.0.Datenquelle;
	$out.1.Detail_Hash_Diff = byte2hex(sha256(concatWithSeparator("~", $in.0.VNr, date2str($in.0.Zeitstempel, "yyyy-MM-dd HH:mm:ss", "de.DE"), $in.0.KuNr, toString($in.0.Wertbetrag), toString($in.0.RateMonat), toString($in.0.RateQuartal), toString($in.0.RateHalbjahr), toString($in.0.RateJahr),$in.0.Datenquelle)));
	$out.2.KuNr_Hash = byte2hex(sha256($in.0.KuNr));
	$out.2.BU_VNr_Hash = byte2hex(sha256($in.0.VNr));
	$out.2.Load_DTS = $in.0.Zeitstempel;
	$out.2.Record_SRC = $in.0.Datenquelle;
	$out.2.KuNr_BU_VNr_CompHash = byte2hex(sha256(concatWithSeparator("~",$in.0.KuNr, $in.0.VNr)));

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node guiName="Reformat" guiX="972" guiY="76" id="REFORMAT1" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2
date now = today();
integer id = 1;
string Record_SRC = "dwh_sa_iz.bu";
string category = "business";
boolean done = false;

// Transforms input record into output record.
function integer transform() {
	$out.0.id = dictionary.error_id++;
	$out.0.Load_DTS = now;
	$out.0.Record_SRC = Record_SRC;
	$out.1.Error_ID_Hash = byte2hex(sha256(num2str(dictionary.error_id)));
	$out.1.FehlerCat = category;
	$out.1.Datensatz = str2byte(concatWithSeparator("~", $in.0.BU_VNr_Hash, $in.0.BU_VNr, date2str($in.0.Load_DTS, "yyyy-MM-dd HH:mm:ss", "de.DE"), $in.0.Record_SRC, num2str($in.0.ErrCode), $in.0.ErrText), "UTF-8");
	$out.1.Erledigt = done;
	$out.1.Record_SRC = Record_SRC;
	$out.1.Load_DTS = now;
	$out.0.ID_Hash = byte2hex(sha256(num2str(dictionary.error_id)));

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node guiName="Reformat" guiX="894" guiY="-272" id="REFORMAT10" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2
date now = today();
string Record_SRC = "dwh_sa_iz.bu";
string category = "business";
boolean done = false;

// Transforms input record into output record.
function integer transform() {
	$out.0.id = dictionary.error_id++;
	$out.0.Load_DTS = now;
	$out.0.Record_SRC = Record_SRC;
	$out.0.ID_Hash = byte2hex(sha256(num2str(dictionary.error_id)));
	$out.1.Error_ID_Hash = byte2hex(sha256(num2str(dictionary.error_id)));
	$out.1.Load_DTS = now;
	$out.1.FehlerCat = category;
	$out.1.Erledigt = done;
	$out.1.Record_SRC = Record_SRC;
	$out.1.Datensatz = str2byte(concatWithSeparator("~", $in.0.KuNr_BU_VNr_CompHash, $in.0.KuNr_Hash, $in.0.BU_VNr_Hash, date2str($in.0.Load_DTS, "yyyy-MM-dd HH:mm:ss", "de.DE"), $in.0.Record_SRC, num2str($in.0.ErrCode), $in.0.ErrText), "UTF-8");

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node guiName="Reformat" guiX="564" guiY="324" id="REFORMAT2" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2
date now = today();
integer id = 1;
string Record_SRC = "dwh_sa_iz.bu";
boolean done = false;
string category = "business";

// Transforms input record into output record.
function integer transform() {
	$out.0.id = dictionary.error_id++;
	$out.0.Load_DTS = now;
	$out.0.Record_SRC = Record_SRC;
	$out.0.ID_Hash = byte2hex(sha256(num2str(dictionary.error_id)));
	$out.1.Datensatz = str2byte(concatWithSeparator("~", 
$in.0.VNr, date2str($in.0.Zeitstempel, "yyyy-MM-dd HH:mm:ss", "de.DE"), $in.0.KuNr, toString($in.0.Wertbetrag), toString($in.0.RateMonat),toString($in.0.RateQuartal),toString($in.0.RateHalbjahr), toString($in.0.RateJahr), $in.0.Datenquelle), "UTF-8");
	$out.1.Erledigt = done;
	$out.1.FehlerCat = category;
	$out.1.Load_DTS = now;
	$out.1.Error_ID_Hash = byte2hex(sha256(num2str(dictionary.error_id)));
	$out.1.Record_SRC = Record_SRC;
	$out.1.Detail_Hash_Diff = byte2hex(sha256(concatWithSeparator("~", $in.0.VNr, date2str($in.0.Zeitstempel, "yyyy-MM-dd HH:mm:ss", "de.DE"), $in.0.KuNr, toString($in.0.Wertbetrag), toString($in.0.RateMonat), toString($in.0.RateQuartal), toString($in.0.RateHalbjahr), toString($in.0.RateJahr),$in.0.Datenquelle)));

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node guiName="Reformat" guiX="971" guiY="169" id="REFORMAT3" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2
string Record_SRC = "dwh_sa_iz.bu";
date now = today();
string category = "business";
boolean done = false;


// Transforms input record into output record.
function integer transform() {
	$out.0.id = dictionary.error_id++;
	$out.0.Load_DTS = now;
	$out.0.Record_SRC = Record_SRC;
	$out.1.Error_ID_Hash = byte2hex(sha256(num2str(dictionary.error_id)));
	$out.1.FehlerCat = category;
	$out.1.Datensatz = str2byte(concatWithSeparator("~", $in.0.BU_VNr_Hash, date2str($in.0.Load_DTS, "yyyy-MM-dd HH:mm:ss", "de.DE"), toString($in.0.Wertbetrag), toString($in.0.RateMonat),toString($in.0.RateQuartal),toString($in.0.RateHalbjahr),toString($in.0.RateJahr), $in.0.Detail_Hash_Diff,  $in.0.Record_SRC, num2str($in.0.ErrCode), $in.0.ErrMessage), "UTF-8");
	$out.1.Erledigt = done;
	$out.1.Record_SRC = Record_SRC;
	$out.1.Load_DTS = now;
	$out.0.ID_Hash = byte2hex(sha256(num2str(dictionary.error_id)));

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node dbConnection="JDBC0" dbTable="s_bu" guiName="s_bu" guiX="596" guiY="169" id="S_BU" maxErrors="1000" type="DB_OUTPUT_TABLE"/>
<Node dbConnection="JDBC0" dbTable="s_error" guiName="s_error" guiX="1164" guiY="76" id="S_ERROR" type="DB_OUTPUT_TABLE"/>
<Node dbConnection="JDBC0" dbTable="s_error" guiName="s_error" guiX="848" guiY="433" id="S_ERROR1" type="DB_OUTPUT_TABLE"/>
<Node dbConnection="JDBC0" dbTable="s_error" guiName="s_error" guiX="1164" guiY="260" id="S_ERROR2" type="DB_OUTPUT_TABLE"/>
<Node dbConnection="JDBC0" dbTable="s_error" guiName="s_error" guiX="1156" guiY="-163" id="S_ERROR8" type="DB_OUTPUT_TABLE"/>
<Edge fromNode="BU:0" guiBendpoints="" guiRouter="Manhattan" id="Edge0" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (out)" toNode="KU_NR_NULL:0"/>
<Edge fromNode="H_BU:0" guiBendpoints="" guiRouter="Manhattan" id="Edge6" inPort="Port 0 (in)" metadata="h_bu" outPort="Port 0 (rejected)" toNode="REFORMAT1:0"/>
<Edge fromNode="KU_NR_NULL:0" guiBendpoints="" guiRouter="Manhattan" id="Edge15" inPort="Port 0 (in)" outPort="Port 0 (accepted)" toNode="REFORMAT:0"/>
<Edge fromNode="KU_NR_NULL:1" guiBendpoints="" guiRouter="Manhattan" id="Edge10" inPort="Port 0 (in)" outPort="Port 1 (rejected)" toNode="REFORMAT2:0"/>
<Edge fromNode="L_KUNDE_BU:0" guiBendpoints="" guiRouter="Manhattan" id="Edge5" inPort="Port 0 (in)" outPort="Port 0 (rejected)" toNode="REFORMAT10:0"/>
<Edge debugMode="false" fromNode="REFORMAT:0" guiBendpoints="" guiRouter="Manhattan" id="Edge1" inPort="Port 0 (in)" metadata="Metadata1" outPort="Port 0 (out)" toNode="H_BU:0"/>
<Edge fromNode="REFORMAT:1" guiBendpoints="" guiRouter="Manhattan" id="Edge16" inPort="Port 0 (in)" metadata="Metadata4" outPort="Port 1 (out)" toNode="S_BU:0"/>
<Edge fromNode="REFORMAT:2" guiBendpoints="" guiRouter="Manhattan" id="Edge2" inPort="Port 0 (in)" metadata="Metadata12" outPort="Port 2 (out)" toNode="L_KUNDE_BU:0"/>
<Edge debugMode="false" fromNode="REFORMAT1:0" guiBendpoints="" guiRouter="Manhattan" id="Edge7" inPort="Port 0 (in)" metadata="Metadata2" outPort="Port 0 (out)" toNode="H_ERROR:0"/>
<Edge fromNode="REFORMAT1:1" guiBendpoints="" guiRouter="Manhattan" id="Edge13" inPort="Port 0 (in)" metadata="Metadata5" outPort="Port 1 (out)" toNode="S_ERROR:0"/>
<Edge fromNode="REFORMAT10:0" guiBendpoints="" guiRouter="Manhattan" id="Edge4" inPort="Port 0 (in)" metadata="Metadata2" outPort="Port 0 (out)" toNode="H_ERROR8:0"/>
<Edge fromNode="REFORMAT10:1" guiBendpoints="" guiRouter="Manhattan" id="Edge3" inPort="Port 0 (in)" metadata="Metadata5" outPort="Port 1 (out)" toNode="S_ERROR8:0"/>
<Edge debugMode="false" fromNode="REFORMAT2:0" guiBendpoints="" guiRouter="Manhattan" id="Edge12" inPort="Port 0 (in)" metadata="Metadata2" outPort="Port 0 (out)" toNode="H_ERROR1:0"/>
<Edge fromNode="REFORMAT2:1" guiBendpoints="" guiRouter="Manhattan" id="Edge14" inPort="Port 0 (in)" metadata="Metadata5" outPort="Port 1 (out)" toNode="S_ERROR1:0"/>
<Edge fromNode="REFORMAT3:0" guiBendpoints="" guiRouter="Manhattan" id="Edge18" inPort="Port 0 (in)" metadata="Metadata2" outPort="Port 0 (out)" toNode="H_ERROR2:0"/>
<Edge fromNode="REFORMAT3:1" guiBendpoints="" guiRouter="Manhattan" id="Edge19" inPort="Port 0 (in)" metadata="Metadata5" outPort="Port 1 (out)" toNode="S_ERROR2:0"/>
<Edge fromNode="S_BU:0" guiBendpoints="" guiRouter="Manhattan" id="Edge17" inPort="Port 0 (in)" metadata="Metadata3" outPort="Port 0 (rejected)" toNode="REFORMAT3:0"/>
</Phase>
<Phase number="3">
<Node dbConnection="JDBC0" dbTable="h_error" guiName="h_error" guiX="2755" guiY="234" id="H_ERROR10" type="DB_OUTPUT_TABLE"/>
<Node dbConnection="JDBC0" dbTable="h_error" guiName="h_error" guiX="2750" guiY="449" id="H_ERROR11" type="DB_OUTPUT_TABLE"/>
<Node dbConnection="JDBC0" dbTable="h_error" guiName="h_error" guiX="2769" guiY="-190" id="H_ERROR12" type="DB_OUTPUT_TABLE"/>
<Node dbConnection="JDBC0" dbTable="h_error" guiName="h_error" guiX="2002" guiY="298" id="H_ERROR30" type="DB_OUTPUT_TABLE"/>
<Node dbConnection="JDBC0" dbTable="h_error" guiName="h_error" guiX="2769" guiY="8" id="H_ERROR9" type="DB_OUTPUT_TABLE"/>
<Node dbConnection="JDBC0" dbTable="h_sach" guiName="h_sach" guiX="2227" guiY="8" id="H_SACH" maxErrors="1000" type="DB_OUTPUT_TABLE"/>
<Node guiName="KuNr != null" guiX="1786" guiY="17" id="KU_NR_NULL4" type="EXT_FILTER">
<attr name="filterExpression"><![CDATA[//#CTL2
lookup(simpleLookup1).get($in.0.KuNr) != null]]></attr>
</Node>
<Node dbConnection="JDBC0" dbTable="l_kunde_sach" guiName="l_kunde_sach" guiX="2222" guiY="-163" id="L_KUNDE_SACH" maxErrors="1000" type="DB_OUTPUT_TABLE"/>
<Node guiName="Reformat" guiX="1958" guiY="8" id="REFORMAT11" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.Sach_VNr = $in.0.VNr;
	$out.0.Load_DTS = $in.0.Zeitstempel;
	$out.0.Record_SRC = $in.0.Datenquelle;
	$out.0.Sach_VNr_Hash = byte2hex(sha256($in.0.VNr));
	$out.1.Sach_VNr_Hash = byte2hex(sha256($in.0.VNr));
	$out.2.Sach_VNr_Hash = byte2hex(sha256($in.0.VNr));
	$out.1.Load_DTS = $in.0.Zeitstempel;
	$out.2.Load_DTS = $in.0.Zeitstempel;
	$out.1.Art = $in.0.Art;
	$out.1.Vbeginn = $in.0.Vbeginn;
	$out.1.Laufzeit = $in.0.Laufzeit;
	$out.1.KFrist = $in.0.KFrist;
	$out.1.Record_SRC = $in.0.Datenquelle;
	$out.2.VWert = $in.0.VWert;
	$out.2.RateMonat = $in.0.RateMonat;
	$out.2.RateQuartal = $in.0.RateQuartal;
	$out.2.RateHalbjahr = $in.0.RateHalbjahr;
	$out.2.RateJahr = $in.0.RateJahr;
	$out.2.Record_SRC = $in.0.Datenquelle;
	$out.1.Detail_Hash_Diff = byte2hex(sha256(concatWithSeparator("~", date2str($in.0.Zeitstempel, "yyyy-MM-dd HH:mm:ss", "de.DE"), $in.0.Art, date2str($in.0.Vbeginn, "yyyy-MM-dd HH:mm:ss", "de.DE"), toString($in.0.Laufzeit), toString($in.0.KFrist),$in.0.Datenquelle)));
	$out.2.Detail_Hash_Diff = byte2hex(sha256(concatWithSeparator("~", date2str($in.0.Zeitstempel, "yyyy-MM-dd HH:mm:ss", "de.DE"), toString($in.0.VWert), toString($in.0.RateMonat), toString($in.0.RateQuartal), toString($in.0.RateHalbjahr), toString($in.0.RateJahr),$in.0.Datenquelle)));
	$out.3.Sach_VNr_Hash = byte2hex(sha256($in.0.VNr));
	$out.3.KuNr_Hash = byte2hex(sha256($in.0.KuNr));
	$out.3.Load_DTS = $in.0.Zeitstempel;
	$out.3.Record_SRC = $in.0.Datenquelle;
	$out.3.KuNr_Sach_VNr_CompHash = byte2hex(sha256(concatWithSeparator("~",$in.0.KuNr, $in.0.VNr)));

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node guiName="Reformat" guiX="2502" guiY="8" id="REFORMAT12" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2
date now = today();
string Record_SRC = "dwh_sa_iz.sach";
string category = "business";
boolean done = false;

// Transforms input record into output record.
function integer transform() {
	$out.0.id = dictionary.error_id++;
	$out.0.Load_DTS = now;
	$out.0.Record_SRC = Record_SRC;
	$out.0.ID_Hash = byte2hex(sha256(num2str(dictionary.error_id)));
	$out.1.Error_ID_Hash = byte2hex(sha256(num2str(dictionary.error_id)));
	$out.1.Load_DTS = now;
	$out.1.FehlerCat = category;
	$out.1.Erledigt = done;
	$out.1.Record_SRC = Record_SRC;
	$out.1.Datensatz = str2byte(concatWithSeparator("~", $in.0.Sach_VNr_Hash, $in.0.Sach_VNr, date2str($in.0.Load_DTS, "yyyy-MM-dd HH:mm:ss", "de.DE"), $in.0.Record_SRC, num2str($in.0.ErrCode), $in.0.ErrText), "UTF-8");

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node guiName="Reformat" guiX="2488" guiY="234" id="REFORMAT13" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2
date now = today();
string Record_SRC = "dwh_sa_iz.sach";
string category = "business";
boolean done = false;

// Transforms input record into output record.
function integer transform() {
	$out.0.id = dictionary.error_id++;
	$out.0.Load_DTS = now;
	$out.0.Record_SRC = Record_SRC;
	$out.0.ID_Hash = byte2hex(sha256(num2str(dictionary.error_id)));
	$out.1.Error_ID_Hash = byte2hex(sha256(num2str(dictionary.error_id)));
	$out.1.Load_DTS = now;
	$out.1.FehlerCat = category;
	$out.1.Erledigt = done;
	$out.1.Record_SRC = Record_SRC;
	$out.1.Datensatz = str2byte(concatWithSeparator("~", $in.0.Sach_VNr_Hash, date2str($in.0.Load_DTS, "yyyy-MM-dd HH:mm:ss", "de.DE"), $in.0.Art, date2str($in.0.Vbeginn, "yyyy-MM-dd HH:mm:ss", "de.DE"),  toString($in.0.Laufzeit),toString($in.0.KFrist), $in.0.Detail_Hash_Diff, $in.0.Record_SRC, num2str($in.0.ErrCode), $in.0.ErrText), "UTF-8");

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node guiName="Reformat" guiX="2483" guiY="449" id="REFORMAT14" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2
date now = today();
string Record_SRC = "dwh_sa_iz.sach";
string category = "business";
boolean done = false;

// Transforms input record into output record.
function integer transform() {
	$out.0.id = dictionary.error_id++;
	$out.0.Load_DTS = now;
	$out.0.Record_SRC = Record_SRC;
	$out.0.ID_Hash = byte2hex(sha256(num2str(dictionary.error_id)));
	$out.1.Error_ID_Hash = byte2hex(sha256(num2str(dictionary.error_id)));
	$out.1.Load_DTS = now;
	$out.1.FehlerCat = category;
	$out.1.Erledigt = done;
	$out.1.Record_SRC = Record_SRC;
	$out.1.Datensatz = str2byte(concatWithSeparator("~", $in.0.Sach_VNr_Hash, date2str($in.0.Load_DTS, "yyyy-MM-dd HH:mm:ss", "de.DE"), toString($in.0.VWert),  toString($in.0.RateMonat), toString($in.0.RateQuartal), toString($in.0.RateHalbjahr), toString($in.0.RateJahr), $in.0.Detail_Hash_Diff, $in.0.Record_SRC, num2str($in.0.ErrCode), $in.0.ErrText), "UTF-8");

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node guiName="Reformat" guiX="2502" guiY="-190" id="REFORMAT15" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2
date now = today();
string Record_SRC = "dwh_sa_iz.sach";
string category = "business";
boolean done = false;

// Transforms input record into output record.
function integer transform() {
	$out.0.id = dictionary.error_id++;
	$out.0.Load_DTS = now;
	$out.0.Record_SRC = Record_SRC;
	$out.0.ID_Hash = byte2hex(sha256(num2str(dictionary.error_id)));
	$out.1.Error_ID_Hash = byte2hex(sha256(num2str(dictionary.error_id)));
	$out.1.Load_DTS = now;
	$out.1.FehlerCat = category;
	$out.1.Erledigt = done;
	$out.1.Record_SRC = Record_SRC;
	$out.1.Datensatz = str2byte(concatWithSeparator("~",$in.0.KuNr_Sach_VNr_CompHash, $in.0.KuNr_Hash, $in.0.Sach_VNr_Hash, date2str($in.0.Load_DTS, "yyyy-MM-dd HH:mm:ss", "de.DE"), $in.0.Record_SRC, num2str($in.0.ErrCode), $in.0.ErrText), "UTF-8");

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node guiName="Reformat" guiX="1735" guiY="298" id="REFORMAT36" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2
date now = today();
string Record_SRC = "dwh_sa_iz.sach";
string category = "business";
boolean done = false;

// Transforms input record into output record.
function integer transform() {
	$out.0.id = dictionary.error_id++;
	$out.0.Load_DTS = now;
	$out.0.Record_SRC = Record_SRC;
	$out.0.ID_Hash = byte2hex(sha256(num2str(dictionary.error_id)));
	$out.1.Error_ID_Hash = byte2hex(sha256(num2str(dictionary.error_id)));
	$out.1.Load_DTS = now;
	$out.1.FehlerCat = category;
	$out.1.Erledigt = done;
	$out.1.Record_SRC = Record_SRC;
	$out.1.Datensatz = str2byte(concatWithSeparator("~", $in.0.VNr, date2str($in.0.Zeitstempel, "yyyy-MM-dd HH:mm:ss", "de.DE"), $in.0.KuNr, $in.0.Art, toString($in.0.VWert), date2str($in.0.Vbeginn, "yyyy-MM-dd HH:mm:ss", "de.DE"), toString($in.0.Laufzeit),toString($in.0.KFrist),toString($in.0.RateMonat),toString($in.0.RateQuartal), toString($in.0.RateHalbjahr), toString($in.0.RateJahr),$in.0.Datenquelle), "UTF-8");

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node dbConnection="JDBC0" guiName="sach" guiX="1614" guiY="8" id="SACH" type="DB_INPUT_TABLE">
<attr name="sqlQuery"><![CDATA[select * from `dwh_sa_iz`.`sach`]]></attr>
</Node>
<Node dbConnection="JDBC0" dbTable="s_error" guiName="s_error" guiX="2750" guiY="343" id="S_ERROR10" type="DB_OUTPUT_TABLE"/>
<Node dbConnection="JDBC0" dbTable="s_error" guiName="s_error" guiX="2745" guiY="558" id="S_ERROR11" type="DB_OUTPUT_TABLE"/>
<Node dbConnection="JDBC0" dbTable="s_error" guiName="s_error" guiX="2764" guiY="-81" id="S_ERROR12" type="DB_OUTPUT_TABLE"/>
<Node dbConnection="JDBC0" dbTable="s_error" guiName="s_error" guiX="1997" guiY="407" id="S_ERROR30" type="DB_OUTPUT_TABLE"/>
<Node dbConnection="JDBC0" dbTable="s_error" guiName="s_error" guiX="2764" guiY="117" id="S_ERROR9" type="DB_OUTPUT_TABLE"/>
<Node dbConnection="JDBC0" dbTable="s_sach_allgemein" guiName="s_sach_allgemein" guiX="2222" guiY="234" id="S_SACH_ALLGEMEIN" maxErrors="1000" type="DB_OUTPUT_TABLE"/>
<Node dbConnection="JDBC0" dbTable="s_sach_beitraege" guiName="s_sach_beitraege" guiX="2204" guiY="449" id="S_SACH_BEITRAEGE" maxErrors="1000" type="DB_OUTPUT_TABLE"/>
<Edge fromNode="H_SACH:0" guiBendpoints="" guiRouter="Manhattan" id="Edge29" inPort="Port 0 (in)" outPort="Port 0 (rejected)" toNode="REFORMAT12:0"/>
<Edge fromNode="KU_NR_NULL4:0" guiBendpoints="" guiRouter="Manhattan" id="Edge132" inPort="Port 0 (in)" outPort="Port 0 (accepted)" toNode="REFORMAT11:0"/>
<Edge fromNode="KU_NR_NULL4:1" guiBendpoints="" guiRouter="Manhattan" id="Edge129" inPort="Port 0 (in)" outPort="Port 1 (rejected)" toNode="REFORMAT36:0"/>
<Edge fromNode="L_KUNDE_SACH:0" guiBendpoints="" guiRouter="Manhattan" id="Edge54" inPort="Port 0 (in)" outPort="Port 0 (rejected)" toNode="REFORMAT15:0"/>
<Edge fromNode="REFORMAT11:0" guiBendpoints="" guiRouter="Manhattan" id="Edge9" inPort="Port 0 (in)" metadata="Metadata14" outPort="Port 0 (out)" toNode="H_SACH:0"/>
<Edge fromNode="REFORMAT11:1" guiBendpoints="" guiRouter="Manhattan" id="Edge11" inPort="Port 0 (in)" metadata="Metadata15" outPort="Port 1 (out)" toNode="S_SACH_ALLGEMEIN:0"/>
<Edge fromNode="REFORMAT11:2" guiBendpoints="" guiRouter="Manhattan" id="Edge26" inPort="Port 0 (in)" metadata="Metadata16" outPort="Port 2 (out)" toNode="S_SACH_BEITRAEGE:0"/>
<Edge fromNode="REFORMAT11:3" guiBendpoints="" guiRouter="Manhattan" id="Edge51" inPort="Port 0 (in)" metadata="Metadata17" outPort="Port 3 (out)" toNode="L_KUNDE_SACH:0"/>
<Edge fromNode="REFORMAT12:0" guiBendpoints="" guiRouter="Manhattan" id="Edge28" inPort="Port 0 (in)" metadata="Metadata2" outPort="Port 0 (out)" toNode="H_ERROR9:0"/>
<Edge fromNode="REFORMAT12:1" guiBendpoints="" guiRouter="Manhattan" id="Edge27" inPort="Port 0 (in)" metadata="Metadata5" outPort="Port 1 (out)" toNode="S_ERROR9:0"/>
<Edge fromNode="REFORMAT13:0" guiBendpoints="" guiRouter="Manhattan" id="Edge30" inPort="Port 0 (in)" metadata="Metadata2" outPort="Port 0 (out)" toNode="H_ERROR10:0"/>
<Edge fromNode="REFORMAT13:1" guiBendpoints="" guiRouter="Manhattan" id="Edge31" inPort="Port 0 (in)" metadata="Metadata5" outPort="Port 1 (out)" toNode="S_ERROR10:0"/>
<Edge fromNode="REFORMAT14:0" guiBendpoints="" guiRouter="Manhattan" id="Edge47" inPort="Port 0 (in)" metadata="Metadata2" outPort="Port 0 (out)" toNode="H_ERROR11:0"/>
<Edge fromNode="REFORMAT14:1" guiBendpoints="" guiRouter="Manhattan" id="Edge48" inPort="Port 0 (in)" metadata="Metadata5" outPort="Port 1 (out)" toNode="S_ERROR11:0"/>
<Edge fromNode="REFORMAT15:0" guiBendpoints="" guiRouter="Manhattan" id="Edge52" inPort="Port 0 (in)" metadata="Metadata2" outPort="Port 0 (out)" toNode="H_ERROR12:0"/>
<Edge fromNode="REFORMAT15:1" guiBendpoints="" guiRouter="Manhattan" id="Edge53" inPort="Port 0 (in)" metadata="Metadata5" outPort="Port 1 (out)" toNode="S_ERROR12:0"/>
<Edge fromNode="REFORMAT36:0" guiBendpoints="" guiRouter="Manhattan" id="Edge130" inPort="Port 0 (in)" metadata="Metadata2" outPort="Port 0 (out)" toNode="H_ERROR30:0"/>
<Edge fromNode="REFORMAT36:1" guiBendpoints="" guiRouter="Manhattan" id="Edge131" inPort="Port 0 (in)" metadata="Metadata5" outPort="Port 1 (out)" toNode="S_ERROR30:0"/>
<Edge fromNode="SACH:0" guiBendpoints="" guiRouter="Manhattan" id="Edge8" inPort="Port 0 (in)" metadata="Metadata13" outPort="Port 0 (out)" toNode="KU_NR_NULL4:0"/>
<Edge fromNode="S_SACH_ALLGEMEIN:0" guiBendpoints="" guiRouter="Manhattan" id="Edge49" inPort="Port 0 (in)" outPort="Port 0 (rejected)" toNode="REFORMAT13:0"/>
<Edge fromNode="S_SACH_BEITRAEGE:0" guiBendpoints="" guiRouter="Manhattan" id="Edge50" inPort="Port 0 (in)" outPort="Port 0 (rejected)" toNode="REFORMAT14:0"/>
</Phase>
<Phase number="4">
<Node dbConnection="JDBC0" dbTable="h_error" guiName="h_error" guiX="2853" guiY="745" id="H_ERROR13" type="DB_OUTPUT_TABLE"/>
<Node dbConnection="JDBC0" dbTable="h_error" guiName="h_error" guiX="2853" guiY="943" id="H_ERROR14" type="DB_OUTPUT_TABLE"/>
<Node dbConnection="JDBC0" dbTable="h_error" guiName="h_error" guiX="2853" guiY="1134" id="H_ERROR15" type="DB_OUTPUT_TABLE"/>
<Node dbConnection="JDBC0" dbTable="h_error" guiName="h_error" guiX="2853" guiY="1339" id="H_ERROR16" type="DB_OUTPUT_TABLE"/>
<Node dbConnection="JDBC0" dbTable="h_error" guiName="h_error" guiX="2853" guiY="1553" id="H_ERROR17" type="DB_OUTPUT_TABLE"/>
<Node dbConnection="JDBC0" dbTable="h_error" guiName="h_error" guiX="2039" guiY="1302" id="H_ERROR29" type="DB_OUTPUT_TABLE"/>
<Node dbConnection="JDBC0" dbTable="h_kfz" guiName="h_kfz" guiX="2289" guiY="739" id="H_KFZ" maxErrors="1000" type="DB_OUTPUT_TABLE"/>
<Node dbConnection="JDBC1" guiName="kfz" guiX="1582" guiY="1143" id="KFZ" type="DB_INPUT_TABLE">
<attr name="sqlQuery"><![CDATA[select * from `dwh_sa_iz`.`kfz`]]></attr>
</Node>
<Node guiName="KuNr != null" guiX="1809" guiY="1143" id="KU_NR_NULL3" type="EXT_FILTER">
<attr name="filterExpression"><![CDATA[//#CTL2
lookup(simpleLookup1).get($in.0.KuNr) != null]]></attr>
</Node>
<Node dbConnection="JDBC0" dbTable="l_kunde_kfz" guiName="l_kunde_kfz" guiX="2289" guiY="916" id="L_KUNDE_KFZ" maxErrors="1000" type="DB_OUTPUT_TABLE"/>
<Node guiName="Reformat" guiX="2007" guiY="1143" id="REFORMAT16" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.1.KuNr_Hash = byte2hex(sha256($in.0.KuNr));
	$out.0.Load_DTS = $in.0.Zeitstempel;
	$out.0.Record_SRC = $in.0.Datenquelle;
	$out.1.Load_DTS = $in.0.Zeitstempel;
	$out.1.Record_SRC = $in.0.Datenquelle;
	$out.2.Load_DTS = $in.0.Zeitstempel;
	$out.2.Record_SRC = $in.0.Datenquelle;
	$out.3.Load_DTS = $in.0.Zeitstempel;
	$out.3.Record_SRC = $in.0.Datenquelle;
	$out.4.Load_DTS = $in.0.Zeitstempel;
	$out.4.Record_SRC = $in.0.Datenquelle;
	$out.0.KFZ_VNr_Hash = byte2hex(sha256($in.0.VNr));
	$out.1.KFZ_VNr_Hash = byte2hex(sha256($in.0.VNr));
	$out.2.KFZ_VNr_Hash = byte2hex(sha256($in.0.VNr));
	$out.3.KFZ_VNr_Hash = byte2hex(sha256($in.0.VNr));
	$out.4.KFZ_VNr_Hash = byte2hex(sha256($in.0.VNr));
	$out.0.KFZ_VNr = $in.0.VNr;
	$out.2.Vbeginn = $in.0.Vbeginn;
	$out.2.Schadensumme_Sach = $in.0.Schadensumme_Sach;
	$out.2.Schadensumme_Person = $in.0.Schadensumme_Person;
	$out.3.HPMonat = $in.0.HPMonat;
	$out.3.TKMonat = $in.0.TKMonat;
	$out.3.VKMonat = $in.0.VKMonat;
	$out.3.HPSatz = $in.0.HPSatz;
	$out.3.TKSatz = $in.0.TKSatz;
	$out.3.VKSatz = $in.0.VKSatz;
	$out.3.SB_TK = $in.0.SB_TK;
	$out.3.SBVK = $in.0.SBVK;
	$out.4.KFZKZ = $in.0.KFZKZ;
	$out.4.Art = $in.0.Art;
	$out.4.Neuwert = $in.0.Neuwert;
	$out.4.Erstzulassung = $in.0.Erstzulassung;
	$out.2.Detail_Hash_Diff = byte2hex(sha256(concatWithSeparator("~",date2str($in.0.Zeitstempel, "yyyy-MM-dd HH:mm:ss", "de.DE"),date2str($in.0.Vbeginn, "yyyy-MM-dd HH:mm:ss", "de.DE"), toString($in.0.Schadensumme_Sach), toString($in.0.Schadensumme_Person), $in.0.Datenquelle)));
	$out.3.Detail_Hash_Diff = byte2hex(sha256(concatWithSeparator("~",date2str($in.0.Zeitstempel, "yyyy-MM-dd HH:mm:ss", "de.DE"), toString($in.0.HPMonat), toString($in.0.TKMonat), toString($in.0.VKMonat), toString($in.0.HPSatz),  toString($in.0.TKSatz), toString($in.0.VKSatz),  toString($in.0.SB_TK), toString($in.0.SBVK), $in.0.Datenquelle)));
	$out.4.Detail_Hash_Diff = byte2hex(sha256(concatWithSeparator("~",date2str($in.0.Zeitstempel, "yyyy-MM-dd HH:mm:ss", "de.DE"), $in.0.KFZKZ, $in.0.Art, toString($in.0.Neuwert), date2str($in.0.Erstzulassung, "yyyy-MM-dd HH:mm:ss", "de.DE"), $in.0.Datenquelle)));
	$out.1.KuNr_KFZ_VNr_CompHash = byte2hex(sha256(concatWithSeparator("~",$in.0.KuNr, $in.0.VNr)));

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node guiName="Reformat" guiX="2586" guiY="745" id="REFORMAT17" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2
date now = today();
string Record_SRC = "dwh_sa_iz.kfz";
string category = "business";
boolean done = false;

// Transforms input record into output record.
function integer transform() {
	$out.0.id = dictionary.error_id++;
	$out.0.Load_DTS = now;
	$out.0.Record_SRC = Record_SRC;
	$out.0.ID_Hash = byte2hex(sha256(num2str(dictionary.error_id)));
	$out.1.Error_ID_Hash = byte2hex(sha256(num2str(dictionary.error_id)));
	$out.1.Load_DTS = now;
	$out.1.FehlerCat = category;
	$out.1.Erledigt = done;
	$out.1.Record_SRC = Record_SRC;
	$out.1.Datensatz = str2byte(concatWithSeparator("~", $in.0.KFZ_VNr_Hash,$in.0.KFZ_VNr, date2str($in.0.Load_DTS, "yyyy-MM-dd HH:mm:ss", "de.DE"), $in.0.Record_SRC, num2str($in.0.ErrCode), $in.0.ErrText), "UTF-8");

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node guiName="Reformat" guiX="2586" guiY="943" id="REFORMAT18" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2
date now = today();
string Record_SRC = "dwh_sa_iz.kfz";
string category = "business";
boolean done = false;

// Transforms input record into output record.
function integer transform() {
	$out.0.id = dictionary.error_id++;
	$out.0.Load_DTS = now;
	$out.0.Record_SRC = Record_SRC;
	$out.0.ID_Hash = byte2hex(sha256(num2str(dictionary.error_id)));
	$out.1.Error_ID_Hash = byte2hex(sha256(num2str(dictionary.error_id)));
	$out.1.Load_DTS = now;
	$out.1.FehlerCat = category;
	$out.1.Erledigt = done;
	$out.1.Record_SRC = Record_SRC;
	$out.1.Datensatz = str2byte(concatWithSeparator("~", $in.0.KuNr_KFZ_VNr_CompHash, $in.0.KuNr_Hash, $in.0.KFZ_VNr_Hash, date2str($in.0.Load_DTS, "yyyy-MM-dd HH:mm:ss", "de.DE"), $in.0.Record_SRC, num2str($in.0.ErrCode), $in.0.ErrText), "UTF-8");

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node guiName="Reformat" guiX="2586" guiY="1134" id="REFORMAT19" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2
date now = today();
string Record_SRC = "dwh_sa_iz.kfz";
string category = "business";
boolean done = false;

// Transforms input record into output record.
function integer transform() {
	$out.0.id = dictionary.error_id++;
	$out.0.Load_DTS = now;
	$out.0.Record_SRC = Record_SRC;
	$out.0.ID_Hash = byte2hex(sha256(num2str(dictionary.error_id)));
	$out.1.Error_ID_Hash = byte2hex(sha256(num2str(dictionary.error_id)));
	$out.1.Load_DTS = now;
	$out.1.FehlerCat = category;
	$out.1.Erledigt = done;
	$out.1.Record_SRC = Record_SRC;
	$out.1.Datensatz = str2byte(concatWithSeparator("~", $in.0.KFZ_VNr_Hash, date2str($in.0.Load_DTS, "yyyy-MM-dd HH:mm:ss", "de.DE"), date2str($in.0.Vbeginn, "yyyy-MM-dd HH:mm:ss", "de.DE"), toString($in.0.Schadensumme_Sach), toString($in.0.Schadensumme_Person), $in.0.Detail_Hash_Diff, $in.0.Record_SRC, num2str($in.0.ErrCode), $in.0.ErrText), "UTF-8");

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node guiName="Reformat" guiX="2586" guiY="1339" id="REFORMAT20" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2
date now = today();
string Record_SRC = "dwh_sa_iz.kfz";
string category = "business";
boolean done = false;

// Transforms input record into output record.
function integer transform() {
	$out.0.id = dictionary.error_id++;
	$out.0.Load_DTS = now;
	$out.0.Record_SRC = Record_SRC;
	$out.0.ID_Hash = byte2hex(sha256(num2str(dictionary.error_id)));
	$out.1.Error_ID_Hash = byte2hex(sha256(num2str(dictionary.error_id)));
	$out.1.Load_DTS = now;
	$out.1.FehlerCat = category;
	$out.1.Erledigt = done;
	$out.1.Record_SRC = Record_SRC;
	$out.1.Datensatz = str2byte(concatWithSeparator("~", $in.0.KFZ_VNr_Hash, date2str($in.0.Load_DTS, "yyyy-MM-dd HH:mm:ss", "de.DE"), toString($in.0.HPMonat) , toString($in.0.TKMonat), toString($in.0.VKMonat), toString($in.0.HPSatz), toString($in.0.TKSatz), toString($in.0.VKSatz), toString($in.0.SB_TK), toString($in.0.SBVK), $in.0.Detail_Hash_Diff, $in.0.Record_SRC, num2str($in.0.ErrCode), $in.0.ErrText), "UTF-8");

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node guiName="Reformat" guiX="2586" guiY="1553" id="REFORMAT21" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2
date now = today();
string Record_SRC = "dwh_sa_iz.kfz";
string category = "business";
boolean done = false;

// Transforms input record into output record.
function integer transform() {
	$out.0.id = dictionary.error_id++;
	$out.0.Load_DTS = now;
	$out.0.Record_SRC = Record_SRC;
	$out.0.ID_Hash = byte2hex(sha256(num2str(dictionary.error_id)));
	$out.1.Error_ID_Hash = byte2hex(sha256(num2str(dictionary.error_id)));
	$out.1.Load_DTS = now;
	$out.1.FehlerCat = category;
	$out.1.Erledigt = done;
	$out.1.Record_SRC = Record_SRC;
	$out.1.Datensatz = str2byte(concatWithSeparator("~", $in.0.KFZ_VNr_Hash, date2str($in.0.Load_DTS, "yyyy-MM-dd HH:mm:ss", "de.DE"), $in.0.KFZKZ, $in.0.Art, toString($in.0.Neuwert), date2str($in.0.Erstzulassung, "yyyy-MM-dd HH:mm:ss", "de.DE"), $in.0.Detail_Hash_Diff, $in.0.Record_SRC, num2str($in.0.ErrCode), $in.0.ErrText), "UTF-8");

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node guiName="Reformat" guiX="1772" guiY="1302" id="REFORMAT35" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2
date now = today();
string Record_SRC = "dwh_sa_iz.kfz";
string category = "business";
boolean done = false;

// Transforms input record into output record.
function integer transform() {
	$out.0.id = dictionary.error_id++;
	$out.0.Load_DTS = now;
	$out.0.Record_SRC = Record_SRC;
	$out.0.ID_Hash = byte2hex(sha256(num2str(dictionary.error_id)));
	$out.1.Error_ID_Hash = byte2hex(sha256(num2str(dictionary.error_id)));
	$out.1.Load_DTS = now;
	$out.1.FehlerCat = category;
	$out.1.Erledigt = done;
	$out.1.Record_SRC = Record_SRC;
	$out.1.Datensatz = str2byte(concatWithSeparator("~", $in.0.VNr, date2str($in.0.Zeitstempel, "yyyy-MM-dd HH:mm:ss", "de.DE"), $in.0.KuNr, $in.0.KFZKZ, $in.0.Art, toString($in.0.Neuwert), date2str($in.0.Erstzulassung, "yyyy-MM-dd HH:mm:ss", "de.DE"),date2str($in.0.Vbeginn, "yyyy-MM-dd HH:mm:ss", "de.DE"), toString($in.0.HPMonat),toString($in.0.TKMonat),toString($in.0.VKMonat),toString($in.0.HPSatz), toString($in.0.TKSatz), toString($in.0.VKSatz), toString($in.0.SB_TK), toString($in.0.SBVK), toString($in.0.Schadensumme_Sach), toString($in.0.Schadensumme_Person), $in.0.Datenquelle), "UTF-8");

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node dbConnection="JDBC0" dbTable="s_error" guiName="s_error" guiX="2848" guiY="854" id="S_ERROR13" type="DB_OUTPUT_TABLE"/>
<Node dbConnection="JDBC0" dbTable="s_error" guiName="s_error" guiX="2848" guiY="1052" id="S_ERROR14" type="DB_OUTPUT_TABLE"/>
<Node dbConnection="JDBC0" dbTable="s_error" guiName="s_error" guiX="2848" guiY="1243" id="S_ERROR15" type="DB_OUTPUT_TABLE"/>
<Node dbConnection="JDBC0" dbTable="s_error" guiName="s_error" guiX="2848" guiY="1448" id="S_ERROR16" type="DB_OUTPUT_TABLE"/>
<Node dbConnection="JDBC0" dbTable="s_error" guiName="s_error" guiX="2848" guiY="1662" id="S_ERROR17" type="DB_OUTPUT_TABLE"/>
<Node dbConnection="JDBC0" dbTable="s_error" guiName="s_error" guiX="2034" guiY="1411" id="S_ERROR29" type="DB_OUTPUT_TABLE"/>
<Node dbConnection="JDBC0" dbTable="s_kfz_allgemein" guiName="s_kfz_allgemein" guiX="2289" guiY="1097" id="S_KFZ_ALLGEMEIN" maxErrors="1000" type="DB_OUTPUT_TABLE"/>
<Node dbConnection="JDBC0" dbTable="s_kfz_beitraege" guiName="s_kfz_beitraege" guiX="2290" guiY="1268" id="S_KFZ_BEITRAEGE" maxErrors="1000" type="DB_OUTPUT_TABLE"/>
<Node dbConnection="JDBC0" dbTable="s_kfz_fahrzeug" guiName="s_kfz_fahrzeug" guiX="2289" guiY="1482" id="S_KFZ_FAHRZEUG" maxErrors="1000" type="DB_OUTPUT_TABLE"/>
<Edge fromNode="H_KFZ:0" guiBendpoints="" guiRouter="Manhattan" id="Edge71" inPort="Port 0 (in)" outPort="Port 0 (rejected)" toNode="REFORMAT17:0"/>
<Edge fromNode="KFZ:0" guiBendpoints="" guiRouter="Manhattan" id="Edge55" inPort="Port 0 (in)" metadata="Metadata18" outPort="Port 0 (out)" toNode="KU_NR_NULL3:0"/>
<Edge fromNode="KU_NR_NULL3:0" guiBendpoints="" guiRouter="Manhattan" id="Edge128" inPort="Port 0 (in)" outPort="Port 0 (accepted)" toNode="REFORMAT16:0"/>
<Edge fromNode="KU_NR_NULL3:1" guiBendpoints="" guiRouter="Manhattan" id="Edge126" inPort="Port 0 (in)" outPort="Port 1 (rejected)" toNode="REFORMAT35:0"/>
<Edge fromNode="L_KUNDE_KFZ:0" guiBendpoints="" guiRouter="Manhattan" id="Edge72" inPort="Port 0 (in)" outPort="Port 0 (rejected)" toNode="REFORMAT18:0"/>
<Edge fromNode="REFORMAT16:0" guiBendpoints="" guiRouter="Manhattan" id="Edge56" inPort="Port 0 (in)" metadata="Metadata19" outPort="Port 0 (out)" toNode="H_KFZ:0"/>
<Edge fromNode="REFORMAT16:1" guiBendpoints="" guiRouter="Manhattan" id="Edge57" inPort="Port 0 (in)" metadata="Metadata20" outPort="Port 1 (out)" toNode="L_KUNDE_KFZ:0"/>
<Edge fromNode="REFORMAT16:2" guiBendpoints="" guiRouter="Manhattan" id="Edge58" inPort="Port 0 (in)" metadata="Metadata21" outPort="Port 2 (out)" toNode="S_KFZ_ALLGEMEIN:0"/>
<Edge fromNode="REFORMAT16:3" guiBendpoints="" guiRouter="Manhattan" id="Edge59" inPort="Port 0 (in)" metadata="Metadata22" outPort="Port 3 (out)" toNode="S_KFZ_BEITRAEGE:0"/>
<Edge fromNode="REFORMAT16:4" guiBendpoints="" guiRouter="Manhattan" id="Edge60" inPort="Port 0 (in)" metadata="Metadata23" outPort="Port 4 (out)" toNode="S_KFZ_FAHRZEUG:0"/>
<Edge fromNode="REFORMAT17:0" guiBendpoints="" guiRouter="Manhattan" id="Edge61" inPort="Port 0 (in)" metadata="Metadata2" outPort="Port 0 (out)" toNode="H_ERROR13:0"/>
<Edge fromNode="REFORMAT17:1" guiBendpoints="" guiRouter="Manhattan" id="Edge62" inPort="Port 0 (in)" metadata="Metadata5" outPort="Port 1 (out)" toNode="S_ERROR13:0"/>
<Edge fromNode="REFORMAT18:0" guiBendpoints="" guiRouter="Manhattan" id="Edge63" inPort="Port 0 (in)" metadata="Metadata2" outPort="Port 0 (out)" toNode="H_ERROR14:0"/>
<Edge fromNode="REFORMAT18:1" guiBendpoints="" guiRouter="Manhattan" id="Edge64" inPort="Port 0 (in)" metadata="Metadata5" outPort="Port 1 (out)" toNode="S_ERROR14:0"/>
<Edge fromNode="REFORMAT19:0" guiBendpoints="" guiRouter="Manhattan" id="Edge65" inPort="Port 0 (in)" metadata="Metadata2" outPort="Port 0 (out)" toNode="H_ERROR15:0"/>
<Edge fromNode="REFORMAT19:1" guiBendpoints="" guiRouter="Manhattan" id="Edge66" inPort="Port 0 (in)" metadata="Metadata5" outPort="Port 1 (out)" toNode="S_ERROR15:0"/>
<Edge fromNode="REFORMAT20:0" guiBendpoints="" guiRouter="Manhattan" id="Edge67" inPort="Port 0 (in)" metadata="Metadata2" outPort="Port 0 (out)" toNode="H_ERROR16:0"/>
<Edge fromNode="REFORMAT20:1" guiBendpoints="" guiRouter="Manhattan" id="Edge68" inPort="Port 0 (in)" metadata="Metadata5" outPort="Port 1 (out)" toNode="S_ERROR16:0"/>
<Edge fromNode="REFORMAT21:0" guiBendpoints="" guiRouter="Manhattan" id="Edge69" inPort="Port 0 (in)" metadata="Metadata2" outPort="Port 0 (out)" toNode="H_ERROR17:0"/>
<Edge fromNode="REFORMAT21:1" guiBendpoints="" guiRouter="Manhattan" id="Edge70" inPort="Port 0 (in)" metadata="Metadata5" outPort="Port 1 (out)" toNode="S_ERROR17:0"/>
<Edge fromNode="REFORMAT35:0" guiBendpoints="" guiRouter="Manhattan" id="Edge127" inPort="Port 0 (in)" metadata="Metadata2" outPort="Port 0 (out)" toNode="H_ERROR29:0"/>
<Edge fromNode="REFORMAT35:1" guiBendpoints="" guiRouter="Manhattan" id="Edge125" inPort="Port 0 (in)" metadata="Metadata5" outPort="Port 1 (out)" toNode="S_ERROR29:0"/>
<Edge fromNode="S_KFZ_ALLGEMEIN:0" guiBendpoints="" guiRouter="Manhattan" id="Edge73" inPort="Port 0 (in)" outPort="Port 0 (rejected)" toNode="REFORMAT19:0"/>
<Edge fromNode="S_KFZ_BEITRAEGE:0" guiBendpoints="" guiRouter="Manhattan" id="Edge74" inPort="Port 0 (in)" outPort="Port 0 (rejected)" toNode="REFORMAT20:0"/>
<Edge fromNode="S_KFZ_FAHRZEUG:0" guiBendpoints="" guiRouter="Manhattan" id="Edge75" inPort="Port 0 (in)" outPort="Port 0 (rejected)" toNode="REFORMAT21:0"/>
</Phase>
<Phase number="5">
<Node dbConnection="JDBC0" dbTable="h_error" guiName="h_error" guiX="1238" guiY="1708" id="H_ERROR18" type="DB_OUTPUT_TABLE"/>
<Node dbConnection="JDBC0" dbTable="h_error" guiName="h_error" guiX="1227" guiY="1916" id="H_ERROR19" type="DB_OUTPUT_TABLE"/>
<Node dbConnection="JDBC0" dbTable="h_error" guiName="h_error" guiX="1237" guiY="2117" id="H_ERROR20" type="DB_OUTPUT_TABLE"/>
<Node dbConnection="JDBC0" dbTable="h_error" guiName="h_error" guiX="1247" guiY="2328" id="H_ERROR21" type="DB_OUTPUT_TABLE"/>
<Node dbConnection="JDBC0" dbTable="h_error" guiName="h_error" guiX="535" guiY="2393" id="H_ERROR28" type="DB_OUTPUT_TABLE"/>
<Node dbConnection="JDBC0" dbTable="h_kv" guiName="h_kv" guiX="735" guiY="1927" id="H_KV" maxErrors="1000" type="DB_OUTPUT_TABLE"/>
<Node guiName="KuNr != null" guiX="290" guiY="2200" id="KU_NR_NULL2" type="EXT_FILTER">
<attr name="filterExpression"><![CDATA[//#CTL2
lookup(simpleLookup1).get($in.0.KuNr) != null]]></attr>
</Node>
<Node dbConnection="JDBC1" guiName="kv" guiX="107" guiY="2200" id="KV" type="DB_INPUT_TABLE">
<attr name="sqlQuery"><![CDATA[select * from `dwh_sa_iz`.`kv`]]></attr>
</Node>
<Node dbConnection="JDBC0" dbTable="l_kunde_kv" guiName="l_kunde_kv" guiX="735" guiY="2065" id="L_KUNDE_KV" maxErrors="1000" type="DB_OUTPUT_TABLE"/>
<Node guiName="Reformat" guiX="450" guiY="2200" id="REFORMAT22" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.KV_VNr_Hash = byte2hex(sha256($in.0.VNr));
	$out.1.KV_VNr_Hash = byte2hex(sha256($in.0.VNr));
	$out.2.KV_VNr_Hash = byte2hex(sha256($in.0.VNr));
	$out.3.KV_VNr_Hash = byte2hex(sha256($in.0.VNr));
	$out.0.Load_DTS = $in.0.Zeitstempel;
	$out.1.Load_DTS = $in.0.Zeitstempel;
	$out.2.Load_DTS = $in.0.Zeitstempel;
	$out.3.Load_DTS = $in.0.Zeitstempel;
	$out.0.KV_VNr = $in.0.VNr;
	$out.0.Record_SRC = $in.0.Datenquelle;
	$out.1.Record_SRC = $in.0.Datenquelle;
	$out.2.Record_SRC = $in.0.Datenquelle;
	$out.3.Record_SRC = $in.0.Datenquelle;
	$out.1.KuNr_Hash = byte2hex(sha256($in.0.KuNr));
	$out.2.Art = $in.0.Art;
	$out.2.Vbeginn = $in.0.Vbeginn;
	$out.3.RateMonat = $in.0.RateMonat;
	$out.2.SB = $in.0.SB;
	$out.3.R1 = $in.0.R1;
	$out.3.R2 = $in.0.R2;
	$out.3.R3 = $in.0.R3;
	$out.2.Detail_Hash_Diff = byte2hex(sha256(concatWithSeparator("~",date2str($in.0.Zeitstempel, "yyyy-MM-dd HH:mm:ss", "de.DE"), $in.0.Art,date2str($in.0.Vbeginn, "yyyy-MM-dd HH:mm:ss", "de.DE"), toString($in.0.SB), $in.0.Datenquelle)));
	$out.3.Detail_Hash_Diff = byte2hex(sha256(concatWithSeparator("~",date2str($in.0.Zeitstempel, "yyyy-MM-dd HH:mm:ss", "de.DE"), toString($in.0.RateMonat),toString($in.0.R1),toString($in.0.R2),toString($in.0.R3), $in.0.Datenquelle)));
	$out.1.KuNr_KV_VNr_CompHash = byte2hex(sha256(concatWithSeparator("~",$in.0.KuNr, $in.0.VNr)));

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node guiName="Reformat" guiX="971" guiY="1708" id="REFORMAT23" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2
date now = today();
string Record_SRC = "dwh_sa_iz.kv";
string category = "business";
boolean done = false;

// Transforms input record into output record.
function integer transform() {
	$out.0.id = dictionary.error_id++;
	$out.0.Load_DTS = now;
	$out.0.Record_SRC = Record_SRC;
	$out.0.ID_Hash = byte2hex(sha256(num2str(dictionary.error_id)));
	$out.1.Error_ID_Hash = byte2hex(sha256(num2str(dictionary.error_id)));
	$out.1.Load_DTS = now;
	$out.1.FehlerCat = category;
	$out.1.Erledigt = done;
	$out.1.Record_SRC = Record_SRC;
	$out.1.Datensatz = str2byte(concatWithSeparator("~", $in.0.KV_VNr_Hash,$in.0.KV_VNr, date2str($in.0.Load_DTS, "yyyy-MM-dd HH:mm:ss", "de.DE"), $in.0.Record_SRC, num2str($in.0.ErrCode), $in.0.ErrText), "UTF-8");

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node guiName="Reformat" guiX="960" guiY="1916" id="REFORMAT24" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2
date now = today();
string Record_SRC = "dwh_sa_iz.kv";
string category = "business";
boolean done = false;

// Transforms input record into output record.
function integer transform() {
	$out.0.id = dictionary.error_id++;
	$out.0.Load_DTS = now;
	$out.0.Record_SRC = Record_SRC;
	$out.0.ID_Hash = byte2hex(sha256(num2str(dictionary.error_id)));
	$out.1.Error_ID_Hash = byte2hex(sha256(num2str(dictionary.error_id)));
	$out.1.Load_DTS = now;
	$out.1.FehlerCat = category;
	$out.1.Erledigt = done;
	$out.1.Record_SRC = Record_SRC;
	$out.1.Datensatz = str2byte(concatWithSeparator("~", $in.0.KuNr_KV_VNr_CompHash, $in.0.KuNr_Hash, $in.0.KV_VNr_Hash, date2str($in.0.Load_DTS, "yyyy-MM-dd HH:mm:ss", "de.DE"), $in.0.Record_SRC, num2str($in.0.ErrCode), $in.0.ErrText), "UTF-8");

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node guiName="Reformat" guiX="970" guiY="2117" id="REFORMAT25" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2
date now = today();
string Record_SRC = "dwh_sa_iz.kv";
string category = "business";
boolean done = false;

// Transforms input record into output record.
function integer transform() {
	$out.0.id = dictionary.error_id++;
	$out.0.Load_DTS = now;
	$out.0.Record_SRC = Record_SRC;
	$out.0.ID_Hash = byte2hex(sha256(num2str(dictionary.error_id)));
	$out.1.Error_ID_Hash = byte2hex(sha256(num2str(dictionary.error_id)));
	$out.1.Load_DTS = now;
	$out.1.FehlerCat = category;
	$out.1.Erledigt = done;
	$out.1.Record_SRC = Record_SRC;
	$out.1.Datensatz = str2byte(concatWithSeparator("~", $in.0.KV_VNr_Hash, date2str($in.0.Load_DTS, "yyyy-MM-dd HH:mm:ss", "de.DE"), $in.0.Art, date2str($in.0.Vbeginn, "yyyy-MM-dd HH:mm:ss", "de.DE"), toString($in.0.SB), $in.0.Detail_Hash_Diff, $in.0.Record_SRC, num2str($in.0.ErrCode), $in.0.ErrText), "UTF-8");

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node guiName="Reformat" guiX="980" guiY="2328" id="REFORMAT26" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2
date now = today();
string Record_SRC = "dwh_sa_iz.kv";
string category = "business";
boolean done = false;

// Transforms input record into output record.
function integer transform() {
	$out.0.id = dictionary.error_id++;
	$out.0.Load_DTS = now;
	$out.0.Record_SRC = Record_SRC;
	$out.0.ID_Hash = byte2hex(sha256(num2str(dictionary.error_id)));
	$out.1.Error_ID_Hash = byte2hex(sha256(num2str(dictionary.error_id)));
	$out.1.Load_DTS = now;
	$out.1.FehlerCat = category;
	$out.1.Erledigt = done;
	$out.1.Record_SRC = Record_SRC;
	$out.1.Datensatz = str2byte(concatWithSeparator("~", $in.0.KV_VNr_Hash, date2str($in.0.Load_DTS, "yyyy-MM-dd HH:mm:ss", "de.DE"), toString($in.0.RateMonat), toString($in.0.R1),toString($in.0.R2),toString($in.0.R3), $in.0.Detail_Hash_Diff, $in.0.Record_SRC, num2str($in.0.ErrCode), $in.0.ErrText), "UTF-8");

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node guiName="Reformat" guiX="268" guiY="2393" id="REFORMAT34" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2
date now = today();
string Record_SRC = "dwh_sa_iz.kv";
string category = "business";
boolean done = false;

// Transforms input record into output record.
function integer transform() {
	$out.0.id = dictionary.error_id++;
	$out.0.Load_DTS = now;
	$out.0.Record_SRC = Record_SRC;
	$out.0.ID_Hash = byte2hex(sha256(num2str(dictionary.error_id)));
	$out.1.Error_ID_Hash = byte2hex(sha256(num2str(dictionary.error_id)));
	$out.1.Load_DTS = now;
	$out.1.FehlerCat = category;
	$out.1.Erledigt = done;
	$out.1.Record_SRC = Record_SRC;
	$out.1.Datensatz = str2byte(concatWithSeparator("~", $in.0.VNr, date2str($in.0.Zeitstempel, "yyyy-MM-dd HH:mm:ss", "de.DE"), $in.0.KuNr, $in.0.Art, date2str($in.0.Vbeginn, "yyyy-MM-dd HH:mm:ss", "de.DE"), toString($in.0.RateMonat),toString($in.0.SB),toString($in.0.R1),toString($in.0.R2), toString($in.0.R3), $in.0.Datenquelle), "UTF-8");

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node dbConnection="JDBC0" dbTable="s_error" guiName="s_error" guiX="1233" guiY="1817" id="S_ERROR18" type="DB_OUTPUT_TABLE"/>
<Node dbConnection="JDBC0" dbTable="s_error" guiName="s_error" guiX="1222" guiY="2025" id="S_ERROR19" type="DB_OUTPUT_TABLE"/>
<Node dbConnection="JDBC0" dbTable="s_error" guiName="s_error" guiX="1232" guiY="2226" id="S_ERROR20" type="DB_OUTPUT_TABLE"/>
<Node dbConnection="JDBC0" dbTable="s_error" guiName="s_error" guiX="1242" guiY="2437" id="S_ERROR21" type="DB_OUTPUT_TABLE"/>
<Node dbConnection="JDBC0" dbTable="s_error" guiName="s_error" guiX="530" guiY="2502" id="S_ERROR28" type="DB_OUTPUT_TABLE"/>
<Node dbConnection="JDBC0" dbTable="s_kv_allgemein" guiName="s_kv_allgemein" guiX="730" guiY="2200" id="S_KV_ALLGEMEIN" maxErrors="1000" type="DB_OUTPUT_TABLE"/>
<Node dbConnection="JDBC0" dbTable="s_kv_beitraege" guiName="s_kv_beitraege" guiX="735" guiY="2353" id="S_KV_BEITRAEGE" maxErrors="1000" type="DB_OUTPUT_TABLE"/>
<Edge fromNode="H_KV:0" guiBendpoints="" guiRouter="Manhattan" id="Edge89" inPort="Port 0 (in)" outPort="Port 0 (rejected)" toNode="REFORMAT23:0"/>
<Edge fromNode="KU_NR_NULL2:0" guiBendpoints="" guiRouter="Manhattan" id="Edge124" inPort="Port 0 (in)" outPort="Port 0 (accepted)" toNode="REFORMAT22:0"/>
<Edge fromNode="KU_NR_NULL2:1" guiBendpoints="" guiRouter="Manhattan" id="Edge123" inPort="Port 0 (in)" outPort="Port 1 (rejected)" toNode="REFORMAT34:0"/>
<Edge fromNode="KV:0" guiBendpoints="" guiRouter="Manhattan" id="Edge76" inPort="Port 0 (in)" metadata="Metadata24" outPort="Port 0 (out)" toNode="KU_NR_NULL2:0"/>
<Edge fromNode="L_KUNDE_KV:0" guiBendpoints="" guiRouter="Manhattan" id="Edge90" inPort="Port 0 (in)" outPort="Port 0 (rejected)" toNode="REFORMAT24:0"/>
<Edge fromNode="REFORMAT22:0" guiBendpoints="" guiRouter="Manhattan" id="Edge77" inPort="Port 0 (in)" metadata="Metadata25" outPort="Port 0 (out)" toNode="H_KV:0"/>
<Edge fromNode="REFORMAT22:1" guiBendpoints="" guiRouter="Manhattan" id="Edge78" inPort="Port 0 (in)" metadata="Metadata26" outPort="Port 1 (out)" toNode="L_KUNDE_KV:0"/>
<Edge fromNode="REFORMAT22:2" guiBendpoints="" guiRouter="Manhattan" id="Edge79" inPort="Port 0 (in)" metadata="Metadata27" outPort="Port 2 (out)" toNode="S_KV_ALLGEMEIN:0"/>
<Edge fromNode="REFORMAT22:3" guiBendpoints="" guiRouter="Manhattan" id="Edge80" inPort="Port 0 (in)" metadata="Metadata28" outPort="Port 3 (out)" toNode="S_KV_BEITRAEGE:0"/>
<Edge fromNode="REFORMAT23:0" guiBendpoints="" guiRouter="Manhattan" id="Edge82" inPort="Port 0 (in)" metadata="Metadata2" outPort="Port 0 (out)" toNode="H_ERROR18:0"/>
<Edge fromNode="REFORMAT23:1" guiBendpoints="" guiRouter="Manhattan" id="Edge81" inPort="Port 0 (in)" metadata="Metadata5" outPort="Port 1 (out)" toNode="S_ERROR18:0"/>
<Edge fromNode="REFORMAT24:0" guiBendpoints="" guiRouter="Manhattan" id="Edge84" inPort="Port 0 (in)" metadata="Metadata2" outPort="Port 0 (out)" toNode="H_ERROR19:0"/>
<Edge fromNode="REFORMAT24:1" guiBendpoints="" guiRouter="Manhattan" id="Edge83" inPort="Port 0 (in)" metadata="Metadata5" outPort="Port 1 (out)" toNode="S_ERROR19:0"/>
<Edge fromNode="REFORMAT25:0" guiBendpoints="" guiRouter="Manhattan" id="Edge86" inPort="Port 0 (in)" metadata="Metadata2" outPort="Port 0 (out)" toNode="H_ERROR20:0"/>
<Edge fromNode="REFORMAT25:1" guiBendpoints="" guiRouter="Manhattan" id="Edge85" inPort="Port 0 (in)" metadata="Metadata5" outPort="Port 1 (out)" toNode="S_ERROR20:0"/>
<Edge fromNode="REFORMAT26:0" guiBendpoints="" guiRouter="Manhattan" id="Edge88" inPort="Port 0 (in)" metadata="Metadata2" outPort="Port 0 (out)" toNode="H_ERROR21:0"/>
<Edge fromNode="REFORMAT26:1" guiBendpoints="" guiRouter="Manhattan" id="Edge87" inPort="Port 0 (in)" metadata="Metadata5" outPort="Port 1 (out)" toNode="S_ERROR21:0"/>
<Edge fromNode="REFORMAT34:0" guiBendpoints="" guiRouter="Manhattan" id="Edge121" inPort="Port 0 (in)" metadata="Metadata2" outPort="Port 0 (out)" toNode="H_ERROR28:0"/>
<Edge fromNode="REFORMAT34:1" guiBendpoints="" guiRouter="Manhattan" id="Edge122" inPort="Port 0 (in)" metadata="Metadata5" outPort="Port 1 (out)" toNode="S_ERROR28:0"/>
<Edge fromNode="S_KV_ALLGEMEIN:0" guiBendpoints="" guiRouter="Manhattan" id="Edge91" inPort="Port 0 (in)" outPort="Port 0 (rejected)" toNode="REFORMAT25:0"/>
<Edge fromNode="S_KV_BEITRAEGE:0" guiBendpoints="" guiRouter="Manhattan" id="Edge92" inPort="Port 0 (in)" outPort="Port 0 (rejected)" toNode="REFORMAT26:0"/>
</Phase>
<Phase number="6">
<Node dbConnection="JDBC0" dbTable="h_error" guiName="h_error" guiX="2775" guiY="1779" id="H_ERROR22" type="DB_OUTPUT_TABLE"/>
<Node dbConnection="JDBC0" dbTable="h_error" guiName="h_error" guiX="2775" guiY="1998" id="H_ERROR23" type="DB_OUTPUT_TABLE"/>
<Node dbConnection="JDBC0" dbTable="h_error" guiName="h_error" guiX="2775" guiY="2209" id="H_ERROR24" type="DB_OUTPUT_TABLE"/>
<Node dbConnection="JDBC0" dbTable="h_error" guiName="h_error" guiX="2784" guiY="2437" id="H_ERROR25" type="DB_OUTPUT_TABLE"/>
<Node dbConnection="JDBC0" dbTable="h_error" guiName="h_error" guiX="2784" guiY="2659" id="H_ERROR26" type="DB_OUTPUT_TABLE"/>
<Node dbConnection="JDBC0" dbTable="h_error" guiName="h_error" guiX="1949" guiY="2271" id="H_ERROR27" type="DB_OUTPUT_TABLE"/>
<Node dbConnection="JDBC0" dbTable="h_lv" guiName="h_lv" guiX="2264" guiY="1850" id="H_LV" maxErrors="1000" type="DB_OUTPUT_TABLE"/>
<Node guiName="KuNr != null" guiX="1704" guiY="2078" id="KU_NR_NULL1" type="EXT_FILTER">
<attr name="filterExpression"><![CDATA[//#CTL2
lookup(simpleLookup1).get($in.0.KuNr) != null]]></attr>
</Node>
<Node dbConnection="JDBC1" guiName="lv" guiX="1487" guiY="2078" id="LV" type="DB_INPUT_TABLE">
<attr name="sqlQuery"><![CDATA[select * from `dwh_sa_iz`.`lv`]]></attr>
</Node>
<Node dbConnection="JDBC0" dbTable="l_kunde_lv" guiName="l_kunde_lv" guiX="2264" guiY="2007" id="L_KUNDE_LV" maxErrors="1000" type="DB_OUTPUT_TABLE"/>
<Node guiName="Reformat" guiX="1899" guiY="2078" id="REFORMAT27" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.LV_VNr_Hash = byte2hex(sha256($in.0.VNr));
	$out.2.LU_VNr_Hash = byte2hex(sha256($in.0.VNr));
	$out.3.LU_VNr_Hash = byte2hex(sha256($in.0.VNr));
	$out.0.LV_VNr = $in.0.VNr;
	$out.0.Load_DTS = $in.0.Zeitstempel;
	$out.1.Load_DTS = $in.0.Zeitstempel;
	$out.2.Load_DTS = $in.0.Zeitstempel;
	$out.3.Load_DTS = $in.0.Zeitstempel;
	$out.4.Load_DTS = $in.0.Zeitstempel;
	$out.0.Record_SRC = $in.0.Datenquelle;
	$out.1.Record_SRC = $in.0.Datenquelle;
	$out.2.Record_SRC = $in.0.Datenquelle;
	$out.3.Record_SRC = $in.0.Datenquelle;
	$out.4.Record_SRC = $in.0.Datenquelle;
	$out.3.Detail_Hash_Diff = byte2hex(sha256(concatWithSeparator("~",date2str($in.0.Zeitstempel, "yyyy-MM-dd HH:mm:ss", "de.DE"), toString($in.0.Wertfaktor),toString($in.0.RateMonat),toString($in.0.RateQuartal),toString($in.0.RateHalbjahr), toString($in.0.RateJahr), $in.0.Datenquelle)));
	$out.2.Detail_Hash_Diff = byte2hex(sha256(concatWithSeparator("~",date2str($in.0.Zeitstempel, "yyyy-MM-dd HH:mm:ss", "de.DE"), toString($in.0.Wertfaktor),toString($in.0.RateMonat),toString($in.0.RateQuartal),toString($in.0.RateHalbjahr), toString($in.0.RateJahr), $in.0.Datenquelle)));
	$out.1.LU_VNr_Hash = byte2hex(sha256($in.0.VNr));
	$out.1.Vbeginn = $in.0.Vbeginn;
	$out.1.Laufzeit = $in.0.Laufzeit;
	$out.2.Wertfaktor = $in.0.Wertfaktor;
	$out.2.RateMonat = $in.0.RateMonat;
	$out.2.RateQuartal = $in.0.RateQuartal;
	$out.2.RateHalbjahr = $in.0.RateHalbjahr;
	$out.2.RateJahr = $in.0.RateJahr;
	$out.3.Begunstigter = $in.0.Begunstigter;
	$out.3.BU = $in.0.BU;
	$out.4.LV_VNr_Hash = byte2hex(sha256($in.0.VNr));
	$out.4.KuNr_Hash = byte2hex(sha256($in.0.KuNr));
	$out.1.Detail_Hash_Diff = byte2hex(sha256(concatWithSeparator("~",date2str($in.0.Zeitstempel, "yyyy-MM-dd HH:mm:ss", "de.DE"), date2str($in.0.Vbeginn, "yyyy-MM-dd HH:mm:ss", "de.DE"), $in.0.Laufzeit, $in.0.Datenquelle)));
	$out.4.KuNr_LV_VNr_CompHash = byte2hex(sha256(concatWithSeparator("~",$in.0.KuNr, $in.0.VNr)));

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node guiName="Reformat" guiX="2508" guiY="1779" id="REFORMAT28" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2
date now = today();
string Record_SRC = "dwh_sa_iz.lv";
string category = "business";
boolean done = false;

// Transforms input record into output record.
function integer transform() {
	$out.0.id = dictionary.error_id++;
	$out.0.Load_DTS = now;
	$out.0.Record_SRC = Record_SRC;
	$out.0.ID_Hash = byte2hex(sha256(num2str(dictionary.error_id)));
	$out.1.Error_ID_Hash = byte2hex(sha256(num2str(dictionary.error_id)));
	$out.1.Load_DTS = now;
	$out.1.FehlerCat = category;
	$out.1.Erledigt = done;
	$out.1.Record_SRC = Record_SRC;
	$out.1.Datensatz = str2byte(concatWithSeparator("~", $in.0.LV_VNr_Hash, $in.0.LV_VNr, date2str($in.0.Load_DTS, "yyyy-MM-dd HH:mm:ss", "de.DE"), $in.0.Record_SRC, num2str($in.0.ErrCode), $in.0.ErrText), "UTF-8");

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node guiName="Reformat" guiX="2508" guiY="1998" id="REFORMAT29" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2
date now = today();
string Record_SRC = "dwh_sa_iz.lv";
string category = "business";
boolean done = false;

// Transforms input record into output record.
function integer transform() {
	$out.0.id = dictionary.error_id++;
	$out.0.Load_DTS = now;
	$out.0.Record_SRC = Record_SRC;
	$out.0.ID_Hash = byte2hex(sha256(num2str(dictionary.error_id)));
	$out.1.Error_ID_Hash = byte2hex(sha256(num2str(dictionary.error_id)));
	$out.1.Load_DTS = now;
	$out.1.FehlerCat = category;
	$out.1.Erledigt = done;
	$out.1.Record_SRC = Record_SRC;
	$out.1.Datensatz = str2byte(concatWithSeparator("~", $in.0.KuNr_LV_VNr_CompHash, $in.0.KuNr_Hash, $in.0.LV_VNr_Hash, date2str($in.0.Load_DTS, "yyyy-MM-dd HH:mm:ss", "de.DE"), $in.0.Record_SRC, num2str($in.0.ErrCode), $in.0.ErrText), "UTF-8");

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node guiName="Reformat" guiX="2508" guiY="2209" id="REFORMAT30" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2
date now = today();
string Record_SRC = "dwh_sa_iz.lv";
string category = "business";
boolean done = false;

// Transforms input record into output record.
function integer transform() {
	$out.0.id = dictionary.error_id++;
	$out.0.Load_DTS = now;
	$out.0.Record_SRC = Record_SRC;
	$out.0.ID_Hash = byte2hex(sha256(num2str(dictionary.error_id)));
	$out.1.Error_ID_Hash = byte2hex(sha256(num2str(dictionary.error_id)));
	$out.1.Load_DTS = now;
	$out.1.FehlerCat = category;
	$out.1.Erledigt = done;
	$out.1.Record_SRC = Record_SRC;
	$out.1.Datensatz = str2byte(concatWithSeparator("~", $in.0.LU_VNr_Hash, date2str($in.0.Load_DTS, "yyyy-MM-dd HH:mm:ss", "de.DE"), date2str($in.0.Vbeginn, "yyyy-MM-dd HH:mm:ss", "de.DE"), $in.0.Laufzeit, $in.0.Detail_Hash_Diff, $in.0.Record_SRC, num2str($in.0.ErrCode), $in.0.ErrText), "UTF-8");

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node guiName="Reformat" guiX="2517" guiY="2437" id="REFORMAT31" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2
date now = today();
string Record_SRC = "dwh_sa_iz.lv";
string category = "business";
boolean done = false;

// Transforms input record into output record.
function integer transform() {
	$out.0.id = dictionary.error_id++;
	$out.0.Load_DTS = now;
	$out.0.Record_SRC = Record_SRC;
	$out.0.ID_Hash = byte2hex(sha256(num2str(dictionary.error_id)));
	$out.1.Error_ID_Hash = byte2hex(sha256(num2str(dictionary.error_id)));
	$out.1.Load_DTS = now;
	$out.1.FehlerCat = category;
	$out.1.Erledigt = done;
	$out.1.Record_SRC = Record_SRC;
	$out.1.Datensatz = str2byte(concatWithSeparator("~", $in.0.LU_VNr_Hash, date2str($in.0.Load_DTS, "yyyy-MM-dd HH:mm:ss", "de.DE"), toString($in.0.Wertfaktor), toString($in.0.RateMonat), toString($in.0.RateQuartal), toString($in.0.RateHalbjahr), toString($in.0.RateJahr), $in.0.Detail_Hash_Diff, $in.0.Record_SRC, num2str($in.0.ErrCode), $in.0.ErrText), "UTF-8");

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node guiName="Reformat" guiX="2517" guiY="2659" id="REFORMAT32" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2
date now = today();
string Record_SRC = "dwh_sa_iz.lv";
string category = "business";
boolean done = false;

// Transforms input record into output record.
function integer transform() {
	$out.0.id = dictionary.error_id++;
	$out.0.Load_DTS = now;
	$out.0.Record_SRC = Record_SRC;
	$out.0.ID_Hash = byte2hex(sha256(num2str(dictionary.error_id)));
	$out.1.Error_ID_Hash = byte2hex(sha256(num2str(dictionary.error_id)));
	$out.1.Load_DTS = now;
	$out.1.FehlerCat = category;
	$out.1.Erledigt = done;
	$out.1.Record_SRC = Record_SRC;
	$out.1.Datensatz = str2byte(concatWithSeparator("~", $in.0.LU_VNr_Hash, date2str($in.0.Load_DTS, "yyyy-MM-dd HH:mm:ss", "de.DE"), $in.0.Begunstigter, $in.0.BU, $in.0.Detail_Hash_Diff, $in.0.Record_SRC, num2str($in.0.ErrCode), $in.0.ErrText), "UTF-8");

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node guiName="Reformat" guiX="1682" guiY="2271" id="REFORMAT33" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2
date now = today();
string Record_SRC = "dwh_sa_iz.lv";
string category = "business";
boolean done = false;

// Transforms input record into output record.
function integer transform() {
	$out.0.id = dictionary.error_id++;
	$out.0.Load_DTS = now;
	$out.0.Record_SRC = Record_SRC;
	$out.0.ID_Hash = byte2hex(sha256(num2str(dictionary.error_id)));
	$out.1.Error_ID_Hash = byte2hex(sha256(num2str(dictionary.error_id)));
	$out.1.Load_DTS = now;
	$out.1.FehlerCat = category;
	$out.1.Erledigt = done;
	$out.1.Record_SRC = Record_SRC;
	$out.1.Datensatz = str2byte(concatWithSeparator("~", $in.0.VNr, date2str($in.0.Zeitstempel, "yyyy-MM-dd HH:mm:ss", "de.DE"), $in.0.KuNr, toString($in.0.Wertfaktor), date2str($in.0.Vbeginn, "yyyy-MM-dd HH:mm:ss", "de.DE"), $in.0.Laufzeit, toString($in.0.RateMonat),toString($in.0.RateQuartal),toString($in.0.RateHalbjahr),toString($in.0.RateJahr), $in.0.Begunstigter, $in.0.BU, $in.0.Datenquelle), "UTF-8");

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node dbConnection="JDBC0" dbTable="s_error" guiName="s_error" guiX="2770" guiY="1888" id="S_ERROR22" type="DB_OUTPUT_TABLE"/>
<Node dbConnection="JDBC0" dbTable="s_error" guiName="s_error" guiX="2770" guiY="2107" id="S_ERROR23" type="DB_OUTPUT_TABLE"/>
<Node dbConnection="JDBC0" dbTable="s_error" guiName="s_error" guiX="2770" guiY="2318" id="S_ERROR24" type="DB_OUTPUT_TABLE"/>
<Node dbConnection="JDBC0" dbTable="s_error" guiName="s_error" guiX="2779" guiY="2546" id="S_ERROR25" type="DB_OUTPUT_TABLE"/>
<Node dbConnection="JDBC0" dbTable="s_error" guiName="s_error" guiX="2779" guiY="2768" id="S_ERROR26" type="DB_OUTPUT_TABLE"/>
<Node dbConnection="JDBC0" dbTable="s_error" guiName="s_error" guiX="1944" guiY="2380" id="S_ERROR27" type="DB_OUTPUT_TABLE"/>
<Node dbConnection="JDBC0" dbTable="s_lv_allgemein" guiName="s_lv_allgemein" guiX="2263" guiY="2149" id="S_LV_ALLGEMEIN" maxErrors="1000" type="DB_OUTPUT_TABLE"/>
<Node dbConnection="JDBC0" dbTable="s_lv_beitraege" guiName="s_lv_beitraege" guiX="2264" guiY="2288" id="S_LV_BEITRAEGE" maxErrors="1000" type="DB_OUTPUT_TABLE"/>
<Node dbConnection="JDBC0" dbTable="s_lv_erben" guiName="s_lv_erben" guiX="2264" guiY="2424" id="S_LV_ERBEN" maxErrors="1000" type="DB_OUTPUT_TABLE"/>
<Edge fromNode="H_LV:0" guiBendpoints="" guiRouter="Manhattan" id="Edge109" inPort="Port 0 (in)" outPort="Port 0 (rejected)" toNode="REFORMAT28:0"/>
<Edge fromNode="KU_NR_NULL1:0" guiBendpoints="" guiRouter="Manhattan" id="Edge117" inPort="Port 0 (in)" outPort="Port 0 (accepted)" toNode="REFORMAT27:0"/>
<Edge fromNode="KU_NR_NULL1:1" guiBendpoints="" guiRouter="Manhattan" id="Edge120" inPort="Port 0 (in)" outPort="Port 1 (rejected)" toNode="REFORMAT33:0"/>
<Edge fromNode="LV:0" guiBendpoints="" guiRouter="Manhattan" id="Edge93" inPort="Port 0 (in)" metadata="Metadata29" outPort="Port 0 (out)" toNode="KU_NR_NULL1:0"/>
<Edge fromNode="L_KUNDE_LV:0" guiBendpoints="" guiRouter="Manhattan" id="Edge110" inPort="Port 0 (in)" outPort="Port 0 (rejected)" toNode="REFORMAT29:0"/>
<Edge fromNode="REFORMAT27:0" guiBendpoints="" guiRouter="Manhattan" id="Edge94" inPort="Port 0 (in)" metadata="Metadata30" outPort="Port 0 (out)" toNode="H_LV:0"/>
<Edge fromNode="REFORMAT27:1" guiBendpoints="" guiRouter="Manhattan" id="Edge96" inPort="Port 0 (in)" metadata="Metadata32" outPort="Port 1 (out)" toNode="S_LV_ALLGEMEIN:0"/>
<Edge fromNode="REFORMAT27:2" guiBendpoints="" guiRouter="Manhattan" id="Edge97" inPort="Port 0 (in)" metadata="Metadata33" outPort="Port 2 (out)" toNode="S_LV_BEITRAEGE:0"/>
<Edge fromNode="REFORMAT27:3" guiBendpoints="" guiRouter="Manhattan" id="Edge98" inPort="Port 0 (in)" metadata="Metadata34" outPort="Port 3 (out)" toNode="S_LV_ERBEN:0"/>
<Edge fromNode="REFORMAT27:4" guiBendpoints="" guiRouter="Manhattan" id="Edge116" inPort="Port 0 (in)" metadata="Metadata31" outPort="Port 4 (out)" toNode="L_KUNDE_LV:0"/>
<Edge fromNode="REFORMAT28:0" guiBendpoints="" guiRouter="Manhattan" id="Edge100" inPort="Port 0 (in)" metadata="Metadata2" outPort="Port 0 (out)" toNode="H_ERROR22:0"/>
<Edge fromNode="REFORMAT28:1" guiBendpoints="" guiRouter="Manhattan" id="Edge99" inPort="Port 0 (in)" metadata="Metadata5" outPort="Port 1 (out)" toNode="S_ERROR22:0"/>
<Edge fromNode="REFORMAT29:0" guiBendpoints="" guiRouter="Manhattan" id="Edge102" inPort="Port 0 (in)" metadata="Metadata2" outPort="Port 0 (out)" toNode="H_ERROR23:0"/>
<Edge fromNode="REFORMAT29:1" guiBendpoints="" guiRouter="Manhattan" id="Edge101" inPort="Port 0 (in)" metadata="Metadata5" outPort="Port 1 (out)" toNode="S_ERROR23:0"/>
<Edge fromNode="REFORMAT30:0" guiBendpoints="" guiRouter="Manhattan" id="Edge104" inPort="Port 0 (in)" metadata="Metadata2" outPort="Port 0 (out)" toNode="H_ERROR24:0"/>
<Edge fromNode="REFORMAT30:1" guiBendpoints="" guiRouter="Manhattan" id="Edge103" inPort="Port 0 (in)" metadata="Metadata5" outPort="Port 1 (out)" toNode="S_ERROR24:0"/>
<Edge fromNode="REFORMAT31:0" guiBendpoints="" guiRouter="Manhattan" id="Edge106" inPort="Port 0 (in)" metadata="Metadata2" outPort="Port 0 (out)" toNode="H_ERROR25:0"/>
<Edge fromNode="REFORMAT31:1" guiBendpoints="" guiRouter="Manhattan" id="Edge105" inPort="Port 0 (in)" metadata="Metadata5" outPort="Port 1 (out)" toNode="S_ERROR25:0"/>
<Edge fromNode="REFORMAT32:0" guiBendpoints="" guiRouter="Manhattan" id="Edge108" inPort="Port 0 (in)" metadata="Metadata2" outPort="Port 0 (out)" toNode="H_ERROR26:0"/>
<Edge fromNode="REFORMAT32:1" guiBendpoints="" guiRouter="Manhattan" id="Edge107" inPort="Port 0 (in)" metadata="Metadata5" outPort="Port 1 (out)" toNode="S_ERROR26:0"/>
<Edge fromNode="REFORMAT33:0" guiBendpoints="" guiRouter="Manhattan" id="Edge119" inPort="Port 0 (in)" metadata="Metadata2" outPort="Port 0 (out)" toNode="H_ERROR27:0"/>
<Edge fromNode="REFORMAT33:1" guiBendpoints="" guiRouter="Manhattan" id="Edge118" inPort="Port 0 (in)" metadata="Metadata5" outPort="Port 1 (out)" toNode="S_ERROR27:0"/>
<Edge fromNode="S_LV_ALLGEMEIN:0" guiBendpoints="" guiRouter="Manhattan" id="Edge111" inPort="Port 0 (in)" outPort="Port 0 (rejected)" toNode="REFORMAT30:0"/>
<Edge fromNode="S_LV_BEITRAEGE:0" guiBendpoints="" guiRouter="Manhattan" id="Edge112" inPort="Port 0 (in)" outPort="Port 0 (rejected)" toNode="REFORMAT31:0"/>
<Edge fromNode="S_LV_ERBEN:0" guiBendpoints="" guiRouter="Manhattan" id="Edge113" inPort="Port 0 (in)" outPort="Port 0 (rejected)" toNode="REFORMAT32:0"/>
</Phase>
</Graph>
